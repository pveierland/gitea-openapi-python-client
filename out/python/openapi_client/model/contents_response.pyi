# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.19.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class ContentsResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    ContentsResponse contains information about a repo's entry's (dir, file, symlink, submodule) metadata and content
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def _links() -> typing.Type['FileLinksResponse']:
                return FileLinksResponse
            content = schemas.StrSchema
            download_url = schemas.StrSchema
            encoding = schemas.StrSchema
            git_url = schemas.StrSchema
            html_url = schemas.StrSchema
            last_commit_sha = schemas.StrSchema
            name = schemas.StrSchema
            path = schemas.StrSchema
            sha = schemas.StrSchema
            size = schemas.Int64Schema
            submodule_git_url = schemas.StrSchema
            target = schemas.StrSchema
            type = schemas.StrSchema
            url = schemas.StrSchema
            __annotations__ = {
                "_links": _links,
                "content": content,
                "download_url": download_url,
                "encoding": encoding,
                "git_url": git_url,
                "html_url": html_url,
                "last_commit_sha": last_commit_sha,
                "name": name,
                "path": path,
                "sha": sha,
                "size": size,
                "submodule_git_url": submodule_git_url,
                "target": target,
                "type": type,
                "url": url,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["_links"]) -> 'FileLinksResponse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["content"]) -> MetaOapg.properties.content: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["download_url"]) -> MetaOapg.properties.download_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["encoding"]) -> MetaOapg.properties.encoding: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["git_url"]) -> MetaOapg.properties.git_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["html_url"]) -> MetaOapg.properties.html_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_commit_sha"]) -> MetaOapg.properties.last_commit_sha: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["path"]) -> MetaOapg.properties.path: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sha"]) -> MetaOapg.properties.sha: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["size"]) -> MetaOapg.properties.size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["submodule_git_url"]) -> MetaOapg.properties.submodule_git_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["target"]) -> MetaOapg.properties.target: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["_links", "content", "download_url", "encoding", "git_url", "html_url", "last_commit_sha", "name", "path", "sha", "size", "submodule_git_url", "target", "type", "url", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["_links"]) -> typing.Union['FileLinksResponse', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["content"]) -> typing.Union[MetaOapg.properties.content, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["download_url"]) -> typing.Union[MetaOapg.properties.download_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["encoding"]) -> typing.Union[MetaOapg.properties.encoding, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["git_url"]) -> typing.Union[MetaOapg.properties.git_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["html_url"]) -> typing.Union[MetaOapg.properties.html_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_commit_sha"]) -> typing.Union[MetaOapg.properties.last_commit_sha, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["path"]) -> typing.Union[MetaOapg.properties.path, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sha"]) -> typing.Union[MetaOapg.properties.sha, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["size"]) -> typing.Union[MetaOapg.properties.size, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["submodule_git_url"]) -> typing.Union[MetaOapg.properties.submodule_git_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["target"]) -> typing.Union[MetaOapg.properties.target, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["_links", "content", "download_url", "encoding", "git_url", "html_url", "last_commit_sha", "name", "path", "sha", "size", "submodule_git_url", "target", "type", "url", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        _links: typing.Union['FileLinksResponse', schemas.Unset] = schemas.unset,
        content: typing.Union[MetaOapg.properties.content, str, schemas.Unset] = schemas.unset,
        download_url: typing.Union[MetaOapg.properties.download_url, str, schemas.Unset] = schemas.unset,
        encoding: typing.Union[MetaOapg.properties.encoding, str, schemas.Unset] = schemas.unset,
        git_url: typing.Union[MetaOapg.properties.git_url, str, schemas.Unset] = schemas.unset,
        html_url: typing.Union[MetaOapg.properties.html_url, str, schemas.Unset] = schemas.unset,
        last_commit_sha: typing.Union[MetaOapg.properties.last_commit_sha, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        path: typing.Union[MetaOapg.properties.path, str, schemas.Unset] = schemas.unset,
        sha: typing.Union[MetaOapg.properties.sha, str, schemas.Unset] = schemas.unset,
        size: typing.Union[MetaOapg.properties.size, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        submodule_git_url: typing.Union[MetaOapg.properties.submodule_git_url, str, schemas.Unset] = schemas.unset,
        target: typing.Union[MetaOapg.properties.target, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        url: typing.Union[MetaOapg.properties.url, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ContentsResponse':
        return super().__new__(
            cls,
            *_args,
            _links=_links,
            content=content,
            download_url=download_url,
            encoding=encoding,
            git_url=git_url,
            html_url=html_url,
            last_commit_sha=last_commit_sha,
            name=name,
            path=path,
            sha=sha,
            size=size,
            submodule_git_url=submodule_git_url,
            target=target,
            type=type,
            url=url,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.file_links_response import FileLinksResponse
