# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.19.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class NotificationThread(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    NotificationThread expose Notification on API
    """


    class MetaOapg:
        
        class properties:
            id = schemas.Int64Schema
            pinned = schemas.BoolSchema
        
            @staticmethod
            def repository() -> typing.Type['Repository']:
                return Repository
        
            @staticmethod
            def subject() -> typing.Type['NotificationSubject']:
                return NotificationSubject
            unread = schemas.BoolSchema
            updated_at = schemas.DateTimeSchema
            url = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "pinned": pinned,
                "repository": repository,
                "subject": subject,
                "unread": unread,
                "updated_at": updated_at,
                "url": url,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pinned"]) -> MetaOapg.properties.pinned: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["repository"]) -> 'Repository': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subject"]) -> 'NotificationSubject': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unread"]) -> MetaOapg.properties.unread: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "pinned", "repository", "subject", "unread", "updated_at", "url", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pinned"]) -> typing.Union[MetaOapg.properties.pinned, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["repository"]) -> typing.Union['Repository', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subject"]) -> typing.Union['NotificationSubject', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unread"]) -> typing.Union[MetaOapg.properties.unread, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> typing.Union[MetaOapg.properties.updated_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "pinned", "repository", "subject", "unread", "updated_at", "url", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        pinned: typing.Union[MetaOapg.properties.pinned, bool, schemas.Unset] = schemas.unset,
        repository: typing.Union['Repository', schemas.Unset] = schemas.unset,
        subject: typing.Union['NotificationSubject', schemas.Unset] = schemas.unset,
        unread: typing.Union[MetaOapg.properties.unread, bool, schemas.Unset] = schemas.unset,
        updated_at: typing.Union[MetaOapg.properties.updated_at, str, datetime, schemas.Unset] = schemas.unset,
        url: typing.Union[MetaOapg.properties.url, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NotificationThread':
        return super().__new__(
            cls,
            *_args,
            id=id,
            pinned=pinned,
            repository=repository,
            subject=subject,
            unread=unread,
            updated_at=updated_at,
            url=url,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.notification_subject import NotificationSubject
from openapi_client.model.repository import Repository
