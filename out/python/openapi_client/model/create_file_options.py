# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.19.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class CreateFileOptions(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    CreateFileOptions options for creating files
Note: `author` and `committer` are optional (if only one is given, it will be used for the other, otherwise the authenticated user will be used)
    """


    class MetaOapg:
        required = {
            "content",
        }
        
        class properties:
            content = schemas.StrSchema
        
            @staticmethod
            def author() -> typing.Type['Identity']:
                return Identity
            branch = schemas.StrSchema
        
            @staticmethod
            def committer() -> typing.Type['Identity']:
                return Identity
        
            @staticmethod
            def dates() -> typing.Type['CommitDateOptions']:
                return CommitDateOptions
            message = schemas.StrSchema
            new_branch = schemas.StrSchema
            signoff = schemas.BoolSchema
            __annotations__ = {
                "content": content,
                "author": author,
                "branch": branch,
                "committer": committer,
                "dates": dates,
                "message": message,
                "new_branch": new_branch,
                "signoff": signoff,
            }
    
    content: MetaOapg.properties.content
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["content"]) -> MetaOapg.properties.content: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["author"]) -> 'Identity': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["branch"]) -> MetaOapg.properties.branch: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["committer"]) -> 'Identity': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dates"]) -> 'CommitDateOptions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["new_branch"]) -> MetaOapg.properties.new_branch: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signoff"]) -> MetaOapg.properties.signoff: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["content", "author", "branch", "committer", "dates", "message", "new_branch", "signoff", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["content"]) -> MetaOapg.properties.content: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["author"]) -> typing.Union['Identity', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["branch"]) -> typing.Union[MetaOapg.properties.branch, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["committer"]) -> typing.Union['Identity', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dates"]) -> typing.Union['CommitDateOptions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> typing.Union[MetaOapg.properties.message, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["new_branch"]) -> typing.Union[MetaOapg.properties.new_branch, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signoff"]) -> typing.Union[MetaOapg.properties.signoff, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["content", "author", "branch", "committer", "dates", "message", "new_branch", "signoff", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        content: typing.Union[MetaOapg.properties.content, str, ],
        author: typing.Union['Identity', schemas.Unset] = schemas.unset,
        branch: typing.Union[MetaOapg.properties.branch, str, schemas.Unset] = schemas.unset,
        committer: typing.Union['Identity', schemas.Unset] = schemas.unset,
        dates: typing.Union['CommitDateOptions', schemas.Unset] = schemas.unset,
        message: typing.Union[MetaOapg.properties.message, str, schemas.Unset] = schemas.unset,
        new_branch: typing.Union[MetaOapg.properties.new_branch, str, schemas.Unset] = schemas.unset,
        signoff: typing.Union[MetaOapg.properties.signoff, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreateFileOptions':
        return super().__new__(
            cls,
            *_args,
            content=content,
            author=author,
            branch=branch,
            committer=committer,
            dates=dates,
            message=message,
            new_branch=new_branch,
            signoff=signoff,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.commit_date_options import CommitDateOptions
from openapi_client.model.identity import Identity
