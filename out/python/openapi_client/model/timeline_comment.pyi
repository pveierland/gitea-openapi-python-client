# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.19.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class TimelineComment(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    TimelineComment represents a timeline comment (comment of any type) on a commit or issue
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def assignee() -> typing.Type['User']:
                return User
        
            @staticmethod
            def assignee_team() -> typing.Type['Team']:
                return Team
            body = schemas.StrSchema
            created_at = schemas.DateTimeSchema
        
            @staticmethod
            def dependent_issue() -> typing.Type['Issue']:
                return Issue
            html_url = schemas.StrSchema
            id = schemas.Int64Schema
            issue_url = schemas.StrSchema
        
            @staticmethod
            def label() -> typing.Type['Label']:
                return Label
        
            @staticmethod
            def milestone() -> typing.Type['Milestone']:
                return Milestone
            new_ref = schemas.StrSchema
            new_title = schemas.StrSchema
        
            @staticmethod
            def old_milestone() -> typing.Type['Milestone']:
                return Milestone
            old_project_id = schemas.Int64Schema
            old_ref = schemas.StrSchema
            old_title = schemas.StrSchema
            project_id = schemas.Int64Schema
            pull_request_url = schemas.StrSchema
            ref_action = schemas.StrSchema
        
            @staticmethod
            def ref_comment() -> typing.Type['Comment']:
                return Comment
            ref_commit_sha = schemas.StrSchema
        
            @staticmethod
            def ref_issue() -> typing.Type['Issue']:
                return Issue
            removed_assignee = schemas.BoolSchema
        
            @staticmethod
            def resolve_doer() -> typing.Type['User']:
                return User
            review_id = schemas.Int64Schema
        
            @staticmethod
            def tracked_time() -> typing.Type['TrackedTime']:
                return TrackedTime
            type = schemas.StrSchema
            updated_at = schemas.DateTimeSchema
        
            @staticmethod
            def user() -> typing.Type['User']:
                return User
            __annotations__ = {
                "assignee": assignee,
                "assignee_team": assignee_team,
                "body": body,
                "created_at": created_at,
                "dependent_issue": dependent_issue,
                "html_url": html_url,
                "id": id,
                "issue_url": issue_url,
                "label": label,
                "milestone": milestone,
                "new_ref": new_ref,
                "new_title": new_title,
                "old_milestone": old_milestone,
                "old_project_id": old_project_id,
                "old_ref": old_ref,
                "old_title": old_title,
                "project_id": project_id,
                "pull_request_url": pull_request_url,
                "ref_action": ref_action,
                "ref_comment": ref_comment,
                "ref_commit_sha": ref_commit_sha,
                "ref_issue": ref_issue,
                "removed_assignee": removed_assignee,
                "resolve_doer": resolve_doer,
                "review_id": review_id,
                "tracked_time": tracked_time,
                "type": type,
                "updated_at": updated_at,
                "user": user,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assignee"]) -> 'User': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assignee_team"]) -> 'Team': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["body"]) -> MetaOapg.properties.body: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dependent_issue"]) -> 'Issue': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["html_url"]) -> MetaOapg.properties.html_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["issue_url"]) -> MetaOapg.properties.issue_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> 'Label': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["milestone"]) -> 'Milestone': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["new_ref"]) -> MetaOapg.properties.new_ref: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["new_title"]) -> MetaOapg.properties.new_title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["old_milestone"]) -> 'Milestone': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["old_project_id"]) -> MetaOapg.properties.old_project_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["old_ref"]) -> MetaOapg.properties.old_ref: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["old_title"]) -> MetaOapg.properties.old_title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["project_id"]) -> MetaOapg.properties.project_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pull_request_url"]) -> MetaOapg.properties.pull_request_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ref_action"]) -> MetaOapg.properties.ref_action: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ref_comment"]) -> 'Comment': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ref_commit_sha"]) -> MetaOapg.properties.ref_commit_sha: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ref_issue"]) -> 'Issue': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["removed_assignee"]) -> MetaOapg.properties.removed_assignee: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resolve_doer"]) -> 'User': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["review_id"]) -> MetaOapg.properties.review_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tracked_time"]) -> 'TrackedTime': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'User': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["assignee", "assignee_team", "body", "created_at", "dependent_issue", "html_url", "id", "issue_url", "label", "milestone", "new_ref", "new_title", "old_milestone", "old_project_id", "old_ref", "old_title", "project_id", "pull_request_url", "ref_action", "ref_comment", "ref_commit_sha", "ref_issue", "removed_assignee", "resolve_doer", "review_id", "tracked_time", "type", "updated_at", "user", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assignee"]) -> typing.Union['User', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assignee_team"]) -> typing.Union['Team', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["body"]) -> typing.Union[MetaOapg.properties.body, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dependent_issue"]) -> typing.Union['Issue', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["html_url"]) -> typing.Union[MetaOapg.properties.html_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["issue_url"]) -> typing.Union[MetaOapg.properties.issue_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> typing.Union['Label', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["milestone"]) -> typing.Union['Milestone', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["new_ref"]) -> typing.Union[MetaOapg.properties.new_ref, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["new_title"]) -> typing.Union[MetaOapg.properties.new_title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["old_milestone"]) -> typing.Union['Milestone', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["old_project_id"]) -> typing.Union[MetaOapg.properties.old_project_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["old_ref"]) -> typing.Union[MetaOapg.properties.old_ref, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["old_title"]) -> typing.Union[MetaOapg.properties.old_title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["project_id"]) -> typing.Union[MetaOapg.properties.project_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pull_request_url"]) -> typing.Union[MetaOapg.properties.pull_request_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ref_action"]) -> typing.Union[MetaOapg.properties.ref_action, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ref_comment"]) -> typing.Union['Comment', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ref_commit_sha"]) -> typing.Union[MetaOapg.properties.ref_commit_sha, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ref_issue"]) -> typing.Union['Issue', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["removed_assignee"]) -> typing.Union[MetaOapg.properties.removed_assignee, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resolve_doer"]) -> typing.Union['User', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["review_id"]) -> typing.Union[MetaOapg.properties.review_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tracked_time"]) -> typing.Union['TrackedTime', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> typing.Union[MetaOapg.properties.updated_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> typing.Union['User', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["assignee", "assignee_team", "body", "created_at", "dependent_issue", "html_url", "id", "issue_url", "label", "milestone", "new_ref", "new_title", "old_milestone", "old_project_id", "old_ref", "old_title", "project_id", "pull_request_url", "ref_action", "ref_comment", "ref_commit_sha", "ref_issue", "removed_assignee", "resolve_doer", "review_id", "tracked_time", "type", "updated_at", "user", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        assignee: typing.Union['User', schemas.Unset] = schemas.unset,
        assignee_team: typing.Union['Team', schemas.Unset] = schemas.unset,
        body: typing.Union[MetaOapg.properties.body, str, schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, schemas.Unset] = schemas.unset,
        dependent_issue: typing.Union['Issue', schemas.Unset] = schemas.unset,
        html_url: typing.Union[MetaOapg.properties.html_url, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        issue_url: typing.Union[MetaOapg.properties.issue_url, str, schemas.Unset] = schemas.unset,
        label: typing.Union['Label', schemas.Unset] = schemas.unset,
        milestone: typing.Union['Milestone', schemas.Unset] = schemas.unset,
        new_ref: typing.Union[MetaOapg.properties.new_ref, str, schemas.Unset] = schemas.unset,
        new_title: typing.Union[MetaOapg.properties.new_title, str, schemas.Unset] = schemas.unset,
        old_milestone: typing.Union['Milestone', schemas.Unset] = schemas.unset,
        old_project_id: typing.Union[MetaOapg.properties.old_project_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        old_ref: typing.Union[MetaOapg.properties.old_ref, str, schemas.Unset] = schemas.unset,
        old_title: typing.Union[MetaOapg.properties.old_title, str, schemas.Unset] = schemas.unset,
        project_id: typing.Union[MetaOapg.properties.project_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        pull_request_url: typing.Union[MetaOapg.properties.pull_request_url, str, schemas.Unset] = schemas.unset,
        ref_action: typing.Union[MetaOapg.properties.ref_action, str, schemas.Unset] = schemas.unset,
        ref_comment: typing.Union['Comment', schemas.Unset] = schemas.unset,
        ref_commit_sha: typing.Union[MetaOapg.properties.ref_commit_sha, str, schemas.Unset] = schemas.unset,
        ref_issue: typing.Union['Issue', schemas.Unset] = schemas.unset,
        removed_assignee: typing.Union[MetaOapg.properties.removed_assignee, bool, schemas.Unset] = schemas.unset,
        resolve_doer: typing.Union['User', schemas.Unset] = schemas.unset,
        review_id: typing.Union[MetaOapg.properties.review_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        tracked_time: typing.Union['TrackedTime', schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        updated_at: typing.Union[MetaOapg.properties.updated_at, str, datetime, schemas.Unset] = schemas.unset,
        user: typing.Union['User', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TimelineComment':
        return super().__new__(
            cls,
            *_args,
            assignee=assignee,
            assignee_team=assignee_team,
            body=body,
            created_at=created_at,
            dependent_issue=dependent_issue,
            html_url=html_url,
            id=id,
            issue_url=issue_url,
            label=label,
            milestone=milestone,
            new_ref=new_ref,
            new_title=new_title,
            old_milestone=old_milestone,
            old_project_id=old_project_id,
            old_ref=old_ref,
            old_title=old_title,
            project_id=project_id,
            pull_request_url=pull_request_url,
            ref_action=ref_action,
            ref_comment=ref_comment,
            ref_commit_sha=ref_commit_sha,
            ref_issue=ref_issue,
            removed_assignee=removed_assignee,
            resolve_doer=resolve_doer,
            review_id=review_id,
            tracked_time=tracked_time,
            type=type,
            updated_at=updated_at,
            user=user,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.comment import Comment
from openapi_client.model.issue import Issue
from openapi_client.model.label import Label
from openapi_client.model.milestone import Milestone
from openapi_client.model.team import Team
from openapi_client.model.tracked_time import TrackedTime
from openapi_client.model.user import User
