# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.19.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class NodeInfo(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    NodeInfo contains standardized way of exposing metadata about a server running one of the distributed social networks
    """


    class MetaOapg:
        
        class properties:
            metadata = schemas.DictSchema
            openRegistrations = schemas.BoolSchema
            
            
            class protocols(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'protocols':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
        
            @staticmethod
            def services() -> typing.Type['NodeInfoServices']:
                return NodeInfoServices
        
            @staticmethod
            def software() -> typing.Type['NodeInfoSoftware']:
                return NodeInfoSoftware
        
            @staticmethod
            def usage() -> typing.Type['NodeInfoUsage']:
                return NodeInfoUsage
            version = schemas.StrSchema
            __annotations__ = {
                "metadata": metadata,
                "openRegistrations": openRegistrations,
                "protocols": protocols,
                "services": services,
                "software": software,
                "usage": usage,
                "version": version,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["openRegistrations"]) -> MetaOapg.properties.openRegistrations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["protocols"]) -> MetaOapg.properties.protocols: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["services"]) -> 'NodeInfoServices': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["software"]) -> 'NodeInfoSoftware': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usage"]) -> 'NodeInfoUsage': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["metadata", "openRegistrations", "protocols", "services", "software", "usage", "version", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union[MetaOapg.properties.metadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["openRegistrations"]) -> typing.Union[MetaOapg.properties.openRegistrations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["protocols"]) -> typing.Union[MetaOapg.properties.protocols, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["services"]) -> typing.Union['NodeInfoServices', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["software"]) -> typing.Union['NodeInfoSoftware', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usage"]) -> typing.Union['NodeInfoUsage', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["metadata", "openRegistrations", "protocols", "services", "software", "usage", "version", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        metadata: typing.Union[MetaOapg.properties.metadata, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        openRegistrations: typing.Union[MetaOapg.properties.openRegistrations, bool, schemas.Unset] = schemas.unset,
        protocols: typing.Union[MetaOapg.properties.protocols, list, tuple, schemas.Unset] = schemas.unset,
        services: typing.Union['NodeInfoServices', schemas.Unset] = schemas.unset,
        software: typing.Union['NodeInfoSoftware', schemas.Unset] = schemas.unset,
        usage: typing.Union['NodeInfoUsage', schemas.Unset] = schemas.unset,
        version: typing.Union[MetaOapg.properties.version, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NodeInfo':
        return super().__new__(
            cls,
            *_args,
            metadata=metadata,
            openRegistrations=openRegistrations,
            protocols=protocols,
            services=services,
            software=software,
            usage=usage,
            version=version,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.node_info_services import NodeInfoServices
from openapi_client.model.node_info_software import NodeInfoSoftware
from openapi_client.model.node_info_usage import NodeInfoUsage
