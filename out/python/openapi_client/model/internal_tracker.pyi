# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.19.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class InternalTracker(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    InternalTracker represents settings for internal tracker
    """


    class MetaOapg:
        
        class properties:
            allow_only_contributors_to_track_time = schemas.BoolSchema
            enable_issue_dependencies = schemas.BoolSchema
            enable_time_tracker = schemas.BoolSchema
            __annotations__ = {
                "allow_only_contributors_to_track_time": allow_only_contributors_to_track_time,
                "enable_issue_dependencies": enable_issue_dependencies,
                "enable_time_tracker": enable_time_tracker,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allow_only_contributors_to_track_time"]) -> MetaOapg.properties.allow_only_contributors_to_track_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable_issue_dependencies"]) -> MetaOapg.properties.enable_issue_dependencies: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable_time_tracker"]) -> MetaOapg.properties.enable_time_tracker: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["allow_only_contributors_to_track_time", "enable_issue_dependencies", "enable_time_tracker", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allow_only_contributors_to_track_time"]) -> typing.Union[MetaOapg.properties.allow_only_contributors_to_track_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable_issue_dependencies"]) -> typing.Union[MetaOapg.properties.enable_issue_dependencies, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable_time_tracker"]) -> typing.Union[MetaOapg.properties.enable_time_tracker, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["allow_only_contributors_to_track_time", "enable_issue_dependencies", "enable_time_tracker", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        allow_only_contributors_to_track_time: typing.Union[MetaOapg.properties.allow_only_contributors_to_track_time, bool, schemas.Unset] = schemas.unset,
        enable_issue_dependencies: typing.Union[MetaOapg.properties.enable_issue_dependencies, bool, schemas.Unset] = schemas.unset,
        enable_time_tracker: typing.Union[MetaOapg.properties.enable_time_tracker, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'InternalTracker':
        return super().__new__(
            cls,
            *_args,
            allow_only_contributors_to_track_time=allow_only_contributors_to_track_time,
            enable_issue_dependencies=enable_issue_dependencies,
            enable_time_tracker=enable_time_tracker,
            _configuration=_configuration,
            **kwargs,
        )
