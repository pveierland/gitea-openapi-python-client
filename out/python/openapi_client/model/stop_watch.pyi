# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.19.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class StopWatch(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    StopWatch represent a running stopwatch
    """


    class MetaOapg:
        
        class properties:
            created = schemas.DateTimeSchema
            duration = schemas.StrSchema
            issue_index = schemas.Int64Schema
            issue_title = schemas.StrSchema
            repo_name = schemas.StrSchema
            repo_owner_name = schemas.StrSchema
            seconds = schemas.Int64Schema
            __annotations__ = {
                "created": created,
                "duration": duration,
                "issue_index": issue_index,
                "issue_title": issue_title,
                "repo_name": repo_name,
                "repo_owner_name": repo_owner_name,
                "seconds": seconds,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["duration"]) -> MetaOapg.properties.duration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["issue_index"]) -> MetaOapg.properties.issue_index: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["issue_title"]) -> MetaOapg.properties.issue_title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["repo_name"]) -> MetaOapg.properties.repo_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["repo_owner_name"]) -> MetaOapg.properties.repo_owner_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["seconds"]) -> MetaOapg.properties.seconds: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["created", "duration", "issue_index", "issue_title", "repo_name", "repo_owner_name", "seconds", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> typing.Union[MetaOapg.properties.created, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["duration"]) -> typing.Union[MetaOapg.properties.duration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["issue_index"]) -> typing.Union[MetaOapg.properties.issue_index, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["issue_title"]) -> typing.Union[MetaOapg.properties.issue_title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["repo_name"]) -> typing.Union[MetaOapg.properties.repo_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["repo_owner_name"]) -> typing.Union[MetaOapg.properties.repo_owner_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["seconds"]) -> typing.Union[MetaOapg.properties.seconds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["created", "duration", "issue_index", "issue_title", "repo_name", "repo_owner_name", "seconds", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        created: typing.Union[MetaOapg.properties.created, str, datetime, schemas.Unset] = schemas.unset,
        duration: typing.Union[MetaOapg.properties.duration, str, schemas.Unset] = schemas.unset,
        issue_index: typing.Union[MetaOapg.properties.issue_index, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        issue_title: typing.Union[MetaOapg.properties.issue_title, str, schemas.Unset] = schemas.unset,
        repo_name: typing.Union[MetaOapg.properties.repo_name, str, schemas.Unset] = schemas.unset,
        repo_owner_name: typing.Union[MetaOapg.properties.repo_owner_name, str, schemas.Unset] = schemas.unset,
        seconds: typing.Union[MetaOapg.properties.seconds, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'StopWatch':
        return super().__new__(
            cls,
            *_args,
            created=created,
            duration=duration,
            issue_index=issue_index,
            issue_title=issue_title,
            repo_name=repo_name,
            repo_owner_name=repo_owner_name,
            seconds=seconds,
            _configuration=_configuration,
            **kwargs,
        )
