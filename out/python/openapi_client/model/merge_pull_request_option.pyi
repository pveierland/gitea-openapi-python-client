# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.19.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class MergePullRequestOption(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    MergePullRequestForm form for merging Pull Request
    """


    class MetaOapg:
        required = {
            "Do",
        }
        
        class properties:
            
            
            class Do(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def MERGE(cls):
                    return cls("merge")
                
                @schemas.classproperty
                def REBASE(cls):
                    return cls("rebase")
                
                @schemas.classproperty
                def REBASEMERGE(cls):
                    return cls("rebase-merge")
                
                @schemas.classproperty
                def SQUASH(cls):
                    return cls("squash")
                
                @schemas.classproperty
                def MANUALLYMERGED(cls):
                    return cls("manually-merged")
            MergeCommitID = schemas.StrSchema
            MergeMessageField = schemas.StrSchema
            MergeTitleField = schemas.StrSchema
            delete_branch_after_merge = schemas.BoolSchema
            force_merge = schemas.BoolSchema
            head_commit_id = schemas.StrSchema
            merge_when_checks_succeed = schemas.BoolSchema
            __annotations__ = {
                "Do": Do,
                "MergeCommitID": MergeCommitID,
                "MergeMessageField": MergeMessageField,
                "MergeTitleField": MergeTitleField,
                "delete_branch_after_merge": delete_branch_after_merge,
                "force_merge": force_merge,
                "head_commit_id": head_commit_id,
                "merge_when_checks_succeed": merge_when_checks_succeed,
            }
    
    Do: MetaOapg.properties.Do
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Do"]) -> MetaOapg.properties.Do: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MergeCommitID"]) -> MetaOapg.properties.MergeCommitID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MergeMessageField"]) -> MetaOapg.properties.MergeMessageField: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MergeTitleField"]) -> MetaOapg.properties.MergeTitleField: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["delete_branch_after_merge"]) -> MetaOapg.properties.delete_branch_after_merge: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["force_merge"]) -> MetaOapg.properties.force_merge: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["head_commit_id"]) -> MetaOapg.properties.head_commit_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merge_when_checks_succeed"]) -> MetaOapg.properties.merge_when_checks_succeed: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Do", "MergeCommitID", "MergeMessageField", "MergeTitleField", "delete_branch_after_merge", "force_merge", "head_commit_id", "merge_when_checks_succeed", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Do"]) -> MetaOapg.properties.Do: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MergeCommitID"]) -> typing.Union[MetaOapg.properties.MergeCommitID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MergeMessageField"]) -> typing.Union[MetaOapg.properties.MergeMessageField, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MergeTitleField"]) -> typing.Union[MetaOapg.properties.MergeTitleField, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["delete_branch_after_merge"]) -> typing.Union[MetaOapg.properties.delete_branch_after_merge, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["force_merge"]) -> typing.Union[MetaOapg.properties.force_merge, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["head_commit_id"]) -> typing.Union[MetaOapg.properties.head_commit_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merge_when_checks_succeed"]) -> typing.Union[MetaOapg.properties.merge_when_checks_succeed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Do", "MergeCommitID", "MergeMessageField", "MergeTitleField", "delete_branch_after_merge", "force_merge", "head_commit_id", "merge_when_checks_succeed", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        Do: typing.Union[MetaOapg.properties.Do, str, ],
        MergeCommitID: typing.Union[MetaOapg.properties.MergeCommitID, str, schemas.Unset] = schemas.unset,
        MergeMessageField: typing.Union[MetaOapg.properties.MergeMessageField, str, schemas.Unset] = schemas.unset,
        MergeTitleField: typing.Union[MetaOapg.properties.MergeTitleField, str, schemas.Unset] = schemas.unset,
        delete_branch_after_merge: typing.Union[MetaOapg.properties.delete_branch_after_merge, bool, schemas.Unset] = schemas.unset,
        force_merge: typing.Union[MetaOapg.properties.force_merge, bool, schemas.Unset] = schemas.unset,
        head_commit_id: typing.Union[MetaOapg.properties.head_commit_id, str, schemas.Unset] = schemas.unset,
        merge_when_checks_succeed: typing.Union[MetaOapg.properties.merge_when_checks_succeed, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MergePullRequestOption':
        return super().__new__(
            cls,
            *_args,
            Do=Do,
            MergeCommitID=MergeCommitID,
            MergeMessageField=MergeMessageField,
            MergeTitleField=MergeTitleField,
            delete_branch_after_merge=delete_branch_after_merge,
            force_merge=force_merge,
            head_commit_id=head_commit_id,
            merge_when_checks_succeed=merge_when_checks_succeed,
            _configuration=_configuration,
            **kwargs,
        )
