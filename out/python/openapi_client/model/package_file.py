# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.19.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class PackageFile(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    PackageFile represents a package file
    """


    class MetaOapg:
        
        class properties:
            Size = schemas.Int64Schema
            id = schemas.Int64Schema
            md5 = schemas.StrSchema
            name = schemas.StrSchema
            sha1 = schemas.StrSchema
            sha256 = schemas.StrSchema
            sha512 = schemas.StrSchema
            __annotations__ = {
                "Size": Size,
                "id": id,
                "md5": md5,
                "name": name,
                "sha1": sha1,
                "sha256": sha256,
                "sha512": sha512,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Size"]) -> MetaOapg.properties.Size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["md5"]) -> MetaOapg.properties.md5: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sha1"]) -> MetaOapg.properties.sha1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sha256"]) -> MetaOapg.properties.sha256: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sha512"]) -> MetaOapg.properties.sha512: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Size", "id", "md5", "name", "sha1", "sha256", "sha512", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Size"]) -> typing.Union[MetaOapg.properties.Size, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["md5"]) -> typing.Union[MetaOapg.properties.md5, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sha1"]) -> typing.Union[MetaOapg.properties.sha1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sha256"]) -> typing.Union[MetaOapg.properties.sha256, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sha512"]) -> typing.Union[MetaOapg.properties.sha512, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Size", "id", "md5", "name", "sha1", "sha256", "sha512", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        Size: typing.Union[MetaOapg.properties.Size, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        md5: typing.Union[MetaOapg.properties.md5, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        sha1: typing.Union[MetaOapg.properties.sha1, str, schemas.Unset] = schemas.unset,
        sha256: typing.Union[MetaOapg.properties.sha256, str, schemas.Unset] = schemas.unset,
        sha512: typing.Union[MetaOapg.properties.sha512, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PackageFile':
        return super().__new__(
            cls,
            *_args,
            Size=Size,
            id=id,
            md5=md5,
            name=name,
            sha1=sha1,
            sha256=sha256,
            sha512=sha512,
            _configuration=_configuration,
            **kwargs,
        )
