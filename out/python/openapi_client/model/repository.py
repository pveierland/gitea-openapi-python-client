# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.19.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class Repository(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Repository represents a repository
    """


    class MetaOapg:
        
        class properties:
            allow_merge_commits = schemas.BoolSchema
            allow_rebase = schemas.BoolSchema
            allow_rebase_explicit = schemas.BoolSchema
            allow_rebase_update = schemas.BoolSchema
            allow_squash_merge = schemas.BoolSchema
            archived = schemas.BoolSchema
            avatar_url = schemas.StrSchema
            clone_url = schemas.StrSchema
            created_at = schemas.DateTimeSchema
            default_allow_maintainer_edit = schemas.BoolSchema
            default_branch = schemas.StrSchema
            default_delete_branch_after_merge = schemas.BoolSchema
            default_merge_style = schemas.StrSchema
            description = schemas.StrSchema
            empty = schemas.BoolSchema
            
            
            class external_tracker(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    any_of_0 = schemas.NoneSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def any_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.any_of_0,
                            ExternalTracker,
                        ]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'external_tracker':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class external_wiki(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    any_of_0 = schemas.NoneSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def any_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.any_of_0,
                            ExternalWiki,
                        ]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'external_wiki':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            fork = schemas.BoolSchema
            forks_count = schemas.Int64Schema
            full_name = schemas.StrSchema
            has_issues = schemas.BoolSchema
            has_projects = schemas.BoolSchema
            has_pull_requests = schemas.BoolSchema
            has_wiki = schemas.BoolSchema
            html_url = schemas.StrSchema
            id = schemas.Int64Schema
            ignore_whitespace_conflicts = schemas.BoolSchema
            internal = schemas.BoolSchema
            
            
            class internal_tracker(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    any_of_0 = schemas.NoneSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def any_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.any_of_0,
                            InternalTracker,
                        ]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'internal_tracker':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            language = schemas.StrSchema
            languages_url = schemas.StrSchema
            link = schemas.StrSchema
            mirror = schemas.BoolSchema
            mirror_interval = schemas.StrSchema
            mirror_updated = schemas.DateTimeSchema
            name = schemas.StrSchema
            open_issues_count = schemas.Int64Schema
            open_pr_counter = schemas.Int64Schema
            original_url = schemas.StrSchema
            
            
            class owner(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    any_of_0 = schemas.NoneSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def any_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.any_of_0,
                            User,
                        ]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'owner':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class parent(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    any_of_0 = schemas.NoneSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def any_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.any_of_0,
                            Repository,
                        ]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'parent':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class permissions(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    any_of_0 = schemas.NoneSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def any_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.any_of_0,
                            Permission,
                        ]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'permissions':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            private = schemas.BoolSchema
            release_counter = schemas.Int64Schema
            
            
            class repo_transfer(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    any_of_0 = schemas.NoneSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def any_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.any_of_0,
                            RepoTransfer,
                        ]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'repo_transfer':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            size = schemas.Int64Schema
            ssh_url = schemas.StrSchema
            stars_count = schemas.Int64Schema
            template = schemas.BoolSchema
            updated_at = schemas.DateTimeSchema
            watchers_count = schemas.Int64Schema
            website = schemas.StrSchema
            __annotations__ = {
                "allow_merge_commits": allow_merge_commits,
                "allow_rebase": allow_rebase,
                "allow_rebase_explicit": allow_rebase_explicit,
                "allow_rebase_update": allow_rebase_update,
                "allow_squash_merge": allow_squash_merge,
                "archived": archived,
                "avatar_url": avatar_url,
                "clone_url": clone_url,
                "created_at": created_at,
                "default_allow_maintainer_edit": default_allow_maintainer_edit,
                "default_branch": default_branch,
                "default_delete_branch_after_merge": default_delete_branch_after_merge,
                "default_merge_style": default_merge_style,
                "description": description,
                "empty": empty,
                "external_tracker": external_tracker,
                "external_wiki": external_wiki,
                "fork": fork,
                "forks_count": forks_count,
                "full_name": full_name,
                "has_issues": has_issues,
                "has_projects": has_projects,
                "has_pull_requests": has_pull_requests,
                "has_wiki": has_wiki,
                "html_url": html_url,
                "id": id,
                "ignore_whitespace_conflicts": ignore_whitespace_conflicts,
                "internal": internal,
                "internal_tracker": internal_tracker,
                "language": language,
                "languages_url": languages_url,
                "link": link,
                "mirror": mirror,
                "mirror_interval": mirror_interval,
                "mirror_updated": mirror_updated,
                "name": name,
                "open_issues_count": open_issues_count,
                "open_pr_counter": open_pr_counter,
                "original_url": original_url,
                "owner": owner,
                "parent": parent,
                "permissions": permissions,
                "private": private,
                "release_counter": release_counter,
                "repo_transfer": repo_transfer,
                "size": size,
                "ssh_url": ssh_url,
                "stars_count": stars_count,
                "template": template,
                "updated_at": updated_at,
                "watchers_count": watchers_count,
                "website": website,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allow_merge_commits"]) -> MetaOapg.properties.allow_merge_commits: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allow_rebase"]) -> MetaOapg.properties.allow_rebase: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allow_rebase_explicit"]) -> MetaOapg.properties.allow_rebase_explicit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allow_rebase_update"]) -> MetaOapg.properties.allow_rebase_update: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allow_squash_merge"]) -> MetaOapg.properties.allow_squash_merge: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["archived"]) -> MetaOapg.properties.archived: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["avatar_url"]) -> MetaOapg.properties.avatar_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clone_url"]) -> MetaOapg.properties.clone_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["default_allow_maintainer_edit"]) -> MetaOapg.properties.default_allow_maintainer_edit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["default_branch"]) -> MetaOapg.properties.default_branch: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["default_delete_branch_after_merge"]) -> MetaOapg.properties.default_delete_branch_after_merge: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["default_merge_style"]) -> MetaOapg.properties.default_merge_style: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["empty"]) -> MetaOapg.properties.empty: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["external_tracker"]) -> MetaOapg.properties.external_tracker: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["external_wiki"]) -> MetaOapg.properties.external_wiki: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fork"]) -> MetaOapg.properties.fork: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["forks_count"]) -> MetaOapg.properties.forks_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["full_name"]) -> MetaOapg.properties.full_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_issues"]) -> MetaOapg.properties.has_issues: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_projects"]) -> MetaOapg.properties.has_projects: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_pull_requests"]) -> MetaOapg.properties.has_pull_requests: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_wiki"]) -> MetaOapg.properties.has_wiki: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["html_url"]) -> MetaOapg.properties.html_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ignore_whitespace_conflicts"]) -> MetaOapg.properties.ignore_whitespace_conflicts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["internal"]) -> MetaOapg.properties.internal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["internal_tracker"]) -> MetaOapg.properties.internal_tracker: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["language"]) -> MetaOapg.properties.language: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["languages_url"]) -> MetaOapg.properties.languages_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mirror"]) -> MetaOapg.properties.mirror: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mirror_interval"]) -> MetaOapg.properties.mirror_interval: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mirror_updated"]) -> MetaOapg.properties.mirror_updated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["open_issues_count"]) -> MetaOapg.properties.open_issues_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["open_pr_counter"]) -> MetaOapg.properties.open_pr_counter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["original_url"]) -> MetaOapg.properties.original_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner"]) -> MetaOapg.properties.owner: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parent"]) -> MetaOapg.properties.parent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permissions"]) -> MetaOapg.properties.permissions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["private"]) -> MetaOapg.properties.private: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["release_counter"]) -> MetaOapg.properties.release_counter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["repo_transfer"]) -> MetaOapg.properties.repo_transfer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["size"]) -> MetaOapg.properties.size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ssh_url"]) -> MetaOapg.properties.ssh_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stars_count"]) -> MetaOapg.properties.stars_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["template"]) -> MetaOapg.properties.template: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["watchers_count"]) -> MetaOapg.properties.watchers_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["website"]) -> MetaOapg.properties.website: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["allow_merge_commits", "allow_rebase", "allow_rebase_explicit", "allow_rebase_update", "allow_squash_merge", "archived", "avatar_url", "clone_url", "created_at", "default_allow_maintainer_edit", "default_branch", "default_delete_branch_after_merge", "default_merge_style", "description", "empty", "external_tracker", "external_wiki", "fork", "forks_count", "full_name", "has_issues", "has_projects", "has_pull_requests", "has_wiki", "html_url", "id", "ignore_whitespace_conflicts", "internal", "internal_tracker", "language", "languages_url", "link", "mirror", "mirror_interval", "mirror_updated", "name", "open_issues_count", "open_pr_counter", "original_url", "owner", "parent", "permissions", "private", "release_counter", "repo_transfer", "size", "ssh_url", "stars_count", "template", "updated_at", "watchers_count", "website", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allow_merge_commits"]) -> typing.Union[MetaOapg.properties.allow_merge_commits, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allow_rebase"]) -> typing.Union[MetaOapg.properties.allow_rebase, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allow_rebase_explicit"]) -> typing.Union[MetaOapg.properties.allow_rebase_explicit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allow_rebase_update"]) -> typing.Union[MetaOapg.properties.allow_rebase_update, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allow_squash_merge"]) -> typing.Union[MetaOapg.properties.allow_squash_merge, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["archived"]) -> typing.Union[MetaOapg.properties.archived, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["avatar_url"]) -> typing.Union[MetaOapg.properties.avatar_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clone_url"]) -> typing.Union[MetaOapg.properties.clone_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["default_allow_maintainer_edit"]) -> typing.Union[MetaOapg.properties.default_allow_maintainer_edit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["default_branch"]) -> typing.Union[MetaOapg.properties.default_branch, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["default_delete_branch_after_merge"]) -> typing.Union[MetaOapg.properties.default_delete_branch_after_merge, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["default_merge_style"]) -> typing.Union[MetaOapg.properties.default_merge_style, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["empty"]) -> typing.Union[MetaOapg.properties.empty, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["external_tracker"]) -> typing.Union[MetaOapg.properties.external_tracker, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["external_wiki"]) -> typing.Union[MetaOapg.properties.external_wiki, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fork"]) -> typing.Union[MetaOapg.properties.fork, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["forks_count"]) -> typing.Union[MetaOapg.properties.forks_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["full_name"]) -> typing.Union[MetaOapg.properties.full_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_issues"]) -> typing.Union[MetaOapg.properties.has_issues, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_projects"]) -> typing.Union[MetaOapg.properties.has_projects, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_pull_requests"]) -> typing.Union[MetaOapg.properties.has_pull_requests, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_wiki"]) -> typing.Union[MetaOapg.properties.has_wiki, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["html_url"]) -> typing.Union[MetaOapg.properties.html_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ignore_whitespace_conflicts"]) -> typing.Union[MetaOapg.properties.ignore_whitespace_conflicts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["internal"]) -> typing.Union[MetaOapg.properties.internal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["internal_tracker"]) -> typing.Union[MetaOapg.properties.internal_tracker, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["language"]) -> typing.Union[MetaOapg.properties.language, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["languages_url"]) -> typing.Union[MetaOapg.properties.languages_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["link"]) -> typing.Union[MetaOapg.properties.link, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mirror"]) -> typing.Union[MetaOapg.properties.mirror, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mirror_interval"]) -> typing.Union[MetaOapg.properties.mirror_interval, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mirror_updated"]) -> typing.Union[MetaOapg.properties.mirror_updated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["open_issues_count"]) -> typing.Union[MetaOapg.properties.open_issues_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["open_pr_counter"]) -> typing.Union[MetaOapg.properties.open_pr_counter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["original_url"]) -> typing.Union[MetaOapg.properties.original_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner"]) -> typing.Union[MetaOapg.properties.owner, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parent"]) -> typing.Union[MetaOapg.properties.parent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permissions"]) -> typing.Union[MetaOapg.properties.permissions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["private"]) -> typing.Union[MetaOapg.properties.private, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["release_counter"]) -> typing.Union[MetaOapg.properties.release_counter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["repo_transfer"]) -> typing.Union[MetaOapg.properties.repo_transfer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["size"]) -> typing.Union[MetaOapg.properties.size, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ssh_url"]) -> typing.Union[MetaOapg.properties.ssh_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stars_count"]) -> typing.Union[MetaOapg.properties.stars_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["template"]) -> typing.Union[MetaOapg.properties.template, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> typing.Union[MetaOapg.properties.updated_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["watchers_count"]) -> typing.Union[MetaOapg.properties.watchers_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["website"]) -> typing.Union[MetaOapg.properties.website, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["allow_merge_commits", "allow_rebase", "allow_rebase_explicit", "allow_rebase_update", "allow_squash_merge", "archived", "avatar_url", "clone_url", "created_at", "default_allow_maintainer_edit", "default_branch", "default_delete_branch_after_merge", "default_merge_style", "description", "empty", "external_tracker", "external_wiki", "fork", "forks_count", "full_name", "has_issues", "has_projects", "has_pull_requests", "has_wiki", "html_url", "id", "ignore_whitespace_conflicts", "internal", "internal_tracker", "language", "languages_url", "link", "mirror", "mirror_interval", "mirror_updated", "name", "open_issues_count", "open_pr_counter", "original_url", "owner", "parent", "permissions", "private", "release_counter", "repo_transfer", "size", "ssh_url", "stars_count", "template", "updated_at", "watchers_count", "website", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        allow_merge_commits: typing.Union[MetaOapg.properties.allow_merge_commits, bool, schemas.Unset] = schemas.unset,
        allow_rebase: typing.Union[MetaOapg.properties.allow_rebase, bool, schemas.Unset] = schemas.unset,
        allow_rebase_explicit: typing.Union[MetaOapg.properties.allow_rebase_explicit, bool, schemas.Unset] = schemas.unset,
        allow_rebase_update: typing.Union[MetaOapg.properties.allow_rebase_update, bool, schemas.Unset] = schemas.unset,
        allow_squash_merge: typing.Union[MetaOapg.properties.allow_squash_merge, bool, schemas.Unset] = schemas.unset,
        archived: typing.Union[MetaOapg.properties.archived, bool, schemas.Unset] = schemas.unset,
        avatar_url: typing.Union[MetaOapg.properties.avatar_url, str, schemas.Unset] = schemas.unset,
        clone_url: typing.Union[MetaOapg.properties.clone_url, str, schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, schemas.Unset] = schemas.unset,
        default_allow_maintainer_edit: typing.Union[MetaOapg.properties.default_allow_maintainer_edit, bool, schemas.Unset] = schemas.unset,
        default_branch: typing.Union[MetaOapg.properties.default_branch, str, schemas.Unset] = schemas.unset,
        default_delete_branch_after_merge: typing.Union[MetaOapg.properties.default_delete_branch_after_merge, bool, schemas.Unset] = schemas.unset,
        default_merge_style: typing.Union[MetaOapg.properties.default_merge_style, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        empty: typing.Union[MetaOapg.properties.empty, bool, schemas.Unset] = schemas.unset,
        external_tracker: typing.Union[MetaOapg.properties.external_tracker, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        external_wiki: typing.Union[MetaOapg.properties.external_wiki, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        fork: typing.Union[MetaOapg.properties.fork, bool, schemas.Unset] = schemas.unset,
        forks_count: typing.Union[MetaOapg.properties.forks_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        full_name: typing.Union[MetaOapg.properties.full_name, str, schemas.Unset] = schemas.unset,
        has_issues: typing.Union[MetaOapg.properties.has_issues, bool, schemas.Unset] = schemas.unset,
        has_projects: typing.Union[MetaOapg.properties.has_projects, bool, schemas.Unset] = schemas.unset,
        has_pull_requests: typing.Union[MetaOapg.properties.has_pull_requests, bool, schemas.Unset] = schemas.unset,
        has_wiki: typing.Union[MetaOapg.properties.has_wiki, bool, schemas.Unset] = schemas.unset,
        html_url: typing.Union[MetaOapg.properties.html_url, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ignore_whitespace_conflicts: typing.Union[MetaOapg.properties.ignore_whitespace_conflicts, bool, schemas.Unset] = schemas.unset,
        internal: typing.Union[MetaOapg.properties.internal, bool, schemas.Unset] = schemas.unset,
        internal_tracker: typing.Union[MetaOapg.properties.internal_tracker, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        language: typing.Union[MetaOapg.properties.language, str, schemas.Unset] = schemas.unset,
        languages_url: typing.Union[MetaOapg.properties.languages_url, str, schemas.Unset] = schemas.unset,
        link: typing.Union[MetaOapg.properties.link, str, schemas.Unset] = schemas.unset,
        mirror: typing.Union[MetaOapg.properties.mirror, bool, schemas.Unset] = schemas.unset,
        mirror_interval: typing.Union[MetaOapg.properties.mirror_interval, str, schemas.Unset] = schemas.unset,
        mirror_updated: typing.Union[MetaOapg.properties.mirror_updated, str, datetime, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        open_issues_count: typing.Union[MetaOapg.properties.open_issues_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        open_pr_counter: typing.Union[MetaOapg.properties.open_pr_counter, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        original_url: typing.Union[MetaOapg.properties.original_url, str, schemas.Unset] = schemas.unset,
        owner: typing.Union[MetaOapg.properties.owner, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        parent: typing.Union[MetaOapg.properties.parent, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        permissions: typing.Union[MetaOapg.properties.permissions, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        private: typing.Union[MetaOapg.properties.private, bool, schemas.Unset] = schemas.unset,
        release_counter: typing.Union[MetaOapg.properties.release_counter, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        repo_transfer: typing.Union[MetaOapg.properties.repo_transfer, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        size: typing.Union[MetaOapg.properties.size, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ssh_url: typing.Union[MetaOapg.properties.ssh_url, str, schemas.Unset] = schemas.unset,
        stars_count: typing.Union[MetaOapg.properties.stars_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        template: typing.Union[MetaOapg.properties.template, bool, schemas.Unset] = schemas.unset,
        updated_at: typing.Union[MetaOapg.properties.updated_at, str, datetime, schemas.Unset] = schemas.unset,
        watchers_count: typing.Union[MetaOapg.properties.watchers_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        website: typing.Union[MetaOapg.properties.website, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Repository':
        return super().__new__(
            cls,
            *_args,
            allow_merge_commits=allow_merge_commits,
            allow_rebase=allow_rebase,
            allow_rebase_explicit=allow_rebase_explicit,
            allow_rebase_update=allow_rebase_update,
            allow_squash_merge=allow_squash_merge,
            archived=archived,
            avatar_url=avatar_url,
            clone_url=clone_url,
            created_at=created_at,
            default_allow_maintainer_edit=default_allow_maintainer_edit,
            default_branch=default_branch,
            default_delete_branch_after_merge=default_delete_branch_after_merge,
            default_merge_style=default_merge_style,
            description=description,
            empty=empty,
            external_tracker=external_tracker,
            external_wiki=external_wiki,
            fork=fork,
            forks_count=forks_count,
            full_name=full_name,
            has_issues=has_issues,
            has_projects=has_projects,
            has_pull_requests=has_pull_requests,
            has_wiki=has_wiki,
            html_url=html_url,
            id=id,
            ignore_whitespace_conflicts=ignore_whitespace_conflicts,
            internal=internal,
            internal_tracker=internal_tracker,
            language=language,
            languages_url=languages_url,
            link=link,
            mirror=mirror,
            mirror_interval=mirror_interval,
            mirror_updated=mirror_updated,
            name=name,
            open_issues_count=open_issues_count,
            open_pr_counter=open_pr_counter,
            original_url=original_url,
            owner=owner,
            parent=parent,
            permissions=permissions,
            private=private,
            release_counter=release_counter,
            repo_transfer=repo_transfer,
            size=size,
            ssh_url=ssh_url,
            stars_count=stars_count,
            template=template,
            updated_at=updated_at,
            watchers_count=watchers_count,
            website=website,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.external_tracker import ExternalTracker
from openapi_client.model.external_wiki import ExternalWiki
from openapi_client.model.internal_tracker import InternalTracker
from openapi_client.model.permission import Permission
from openapi_client.model.repo_transfer import RepoTransfer
from openapi_client.model.repository import Repository
from openapi_client.model.user import User
