# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.19.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class ExternalTracker(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    ExternalTracker represents settings for external tracker
    """


    class MetaOapg:
        
        class properties:
            external_tracker_format = schemas.StrSchema
            external_tracker_regexp_pattern = schemas.StrSchema
            external_tracker_style = schemas.StrSchema
            external_tracker_url = schemas.StrSchema
            __annotations__ = {
                "external_tracker_format": external_tracker_format,
                "external_tracker_regexp_pattern": external_tracker_regexp_pattern,
                "external_tracker_style": external_tracker_style,
                "external_tracker_url": external_tracker_url,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["external_tracker_format"]) -> MetaOapg.properties.external_tracker_format: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["external_tracker_regexp_pattern"]) -> MetaOapg.properties.external_tracker_regexp_pattern: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["external_tracker_style"]) -> MetaOapg.properties.external_tracker_style: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["external_tracker_url"]) -> MetaOapg.properties.external_tracker_url: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["external_tracker_format", "external_tracker_regexp_pattern", "external_tracker_style", "external_tracker_url", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["external_tracker_format"]) -> typing.Union[MetaOapg.properties.external_tracker_format, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["external_tracker_regexp_pattern"]) -> typing.Union[MetaOapg.properties.external_tracker_regexp_pattern, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["external_tracker_style"]) -> typing.Union[MetaOapg.properties.external_tracker_style, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["external_tracker_url"]) -> typing.Union[MetaOapg.properties.external_tracker_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["external_tracker_format", "external_tracker_regexp_pattern", "external_tracker_style", "external_tracker_url", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        external_tracker_format: typing.Union[MetaOapg.properties.external_tracker_format, str, schemas.Unset] = schemas.unset,
        external_tracker_regexp_pattern: typing.Union[MetaOapg.properties.external_tracker_regexp_pattern, str, schemas.Unset] = schemas.unset,
        external_tracker_style: typing.Union[MetaOapg.properties.external_tracker_style, str, schemas.Unset] = schemas.unset,
        external_tracker_url: typing.Union[MetaOapg.properties.external_tracker_url, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ExternalTracker':
        return super().__new__(
            cls,
            *_args,
            external_tracker_format=external_tracker_format,
            external_tracker_regexp_pattern=external_tracker_regexp_pattern,
            external_tracker_style=external_tracker_style,
            external_tracker_url=external_tracker_url,
            _configuration=_configuration,
            **kwargs,
        )
