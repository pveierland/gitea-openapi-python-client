# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.19.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class CreateReleaseOption(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    CreateReleaseOption options when creating a release
    """


    class MetaOapg:
        required = {
            "tag_name",
        }
        
        class properties:
            tag_name = schemas.StrSchema
            body = schemas.StrSchema
            draft = schemas.BoolSchema
            name = schemas.StrSchema
            prerelease = schemas.BoolSchema
            target_commitish = schemas.StrSchema
            __annotations__ = {
                "tag_name": tag_name,
                "body": body,
                "draft": draft,
                "name": name,
                "prerelease": prerelease,
                "target_commitish": target_commitish,
            }
    
    tag_name: MetaOapg.properties.tag_name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tag_name"]) -> MetaOapg.properties.tag_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["body"]) -> MetaOapg.properties.body: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["draft"]) -> MetaOapg.properties.draft: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prerelease"]) -> MetaOapg.properties.prerelease: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["target_commitish"]) -> MetaOapg.properties.target_commitish: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["tag_name", "body", "draft", "name", "prerelease", "target_commitish", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tag_name"]) -> MetaOapg.properties.tag_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["body"]) -> typing.Union[MetaOapg.properties.body, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["draft"]) -> typing.Union[MetaOapg.properties.draft, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prerelease"]) -> typing.Union[MetaOapg.properties.prerelease, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["target_commitish"]) -> typing.Union[MetaOapg.properties.target_commitish, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tag_name", "body", "draft", "name", "prerelease", "target_commitish", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        tag_name: typing.Union[MetaOapg.properties.tag_name, str, ],
        body: typing.Union[MetaOapg.properties.body, str, schemas.Unset] = schemas.unset,
        draft: typing.Union[MetaOapg.properties.draft, bool, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        prerelease: typing.Union[MetaOapg.properties.prerelease, bool, schemas.Unset] = schemas.unset,
        target_commitish: typing.Union[MetaOapg.properties.target_commitish, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreateReleaseOption':
        return super().__new__(
            cls,
            *_args,
            tag_name=tag_name,
            body=body,
            draft=draft,
            name=name,
            prerelease=prerelease,
            target_commitish=target_commitish,
            _configuration=_configuration,
            **kwargs,
        )
