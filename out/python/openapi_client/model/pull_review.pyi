# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.19.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class PullReview(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    PullReview represents a pull request review
    """


    class MetaOapg:
        
        class properties:
            body = schemas.StrSchema
            comments_count = schemas.Int64Schema
            commit_id = schemas.StrSchema
            dismissed = schemas.BoolSchema
            html_url = schemas.StrSchema
            id = schemas.Int64Schema
            official = schemas.BoolSchema
            pull_request_url = schemas.StrSchema
            stale = schemas.BoolSchema
            state = schemas.StrSchema
            submitted_at = schemas.DateTimeSchema
        
            @staticmethod
            def team() -> typing.Type['Team']:
                return Team
            updated_at = schemas.DateTimeSchema
        
            @staticmethod
            def user() -> typing.Type['User']:
                return User
            __annotations__ = {
                "body": body,
                "comments_count": comments_count,
                "commit_id": commit_id,
                "dismissed": dismissed,
                "html_url": html_url,
                "id": id,
                "official": official,
                "pull_request_url": pull_request_url,
                "stale": stale,
                "state": state,
                "submitted_at": submitted_at,
                "team": team,
                "updated_at": updated_at,
                "user": user,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["body"]) -> MetaOapg.properties.body: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comments_count"]) -> MetaOapg.properties.comments_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["commit_id"]) -> MetaOapg.properties.commit_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dismissed"]) -> MetaOapg.properties.dismissed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["html_url"]) -> MetaOapg.properties.html_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["official"]) -> MetaOapg.properties.official: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pull_request_url"]) -> MetaOapg.properties.pull_request_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stale"]) -> MetaOapg.properties.stale: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["submitted_at"]) -> MetaOapg.properties.submitted_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["team"]) -> 'Team': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'User': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["body", "comments_count", "commit_id", "dismissed", "html_url", "id", "official", "pull_request_url", "stale", "state", "submitted_at", "team", "updated_at", "user", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["body"]) -> typing.Union[MetaOapg.properties.body, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comments_count"]) -> typing.Union[MetaOapg.properties.comments_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["commit_id"]) -> typing.Union[MetaOapg.properties.commit_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dismissed"]) -> typing.Union[MetaOapg.properties.dismissed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["html_url"]) -> typing.Union[MetaOapg.properties.html_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["official"]) -> typing.Union[MetaOapg.properties.official, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pull_request_url"]) -> typing.Union[MetaOapg.properties.pull_request_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stale"]) -> typing.Union[MetaOapg.properties.stale, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["submitted_at"]) -> typing.Union[MetaOapg.properties.submitted_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["team"]) -> typing.Union['Team', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> typing.Union[MetaOapg.properties.updated_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> typing.Union['User', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["body", "comments_count", "commit_id", "dismissed", "html_url", "id", "official", "pull_request_url", "stale", "state", "submitted_at", "team", "updated_at", "user", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        body: typing.Union[MetaOapg.properties.body, str, schemas.Unset] = schemas.unset,
        comments_count: typing.Union[MetaOapg.properties.comments_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        commit_id: typing.Union[MetaOapg.properties.commit_id, str, schemas.Unset] = schemas.unset,
        dismissed: typing.Union[MetaOapg.properties.dismissed, bool, schemas.Unset] = schemas.unset,
        html_url: typing.Union[MetaOapg.properties.html_url, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        official: typing.Union[MetaOapg.properties.official, bool, schemas.Unset] = schemas.unset,
        pull_request_url: typing.Union[MetaOapg.properties.pull_request_url, str, schemas.Unset] = schemas.unset,
        stale: typing.Union[MetaOapg.properties.stale, bool, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
        submitted_at: typing.Union[MetaOapg.properties.submitted_at, str, datetime, schemas.Unset] = schemas.unset,
        team: typing.Union['Team', schemas.Unset] = schemas.unset,
        updated_at: typing.Union[MetaOapg.properties.updated_at, str, datetime, schemas.Unset] = schemas.unset,
        user: typing.Union['User', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PullReview':
        return super().__new__(
            cls,
            *_args,
            body=body,
            comments_count=comments_count,
            commit_id=commit_id,
            dismissed=dismissed,
            html_url=html_url,
            id=id,
            official=official,
            pull_request_url=pull_request_url,
            stale=stale,
            state=state,
            submitted_at=submitted_at,
            team=team,
            updated_at=updated_at,
            user=user,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.team import Team
from openapi_client.model.user import User
