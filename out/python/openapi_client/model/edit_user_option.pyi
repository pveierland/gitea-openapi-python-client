# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.19.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class EditUserOption(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    EditUserOption edit user options
    """


    class MetaOapg:
        required = {
            "login_name",
            "source_id",
        }
        
        class properties:
            login_name = schemas.StrSchema
            source_id = schemas.Int64Schema
            active = schemas.BoolSchema
            admin = schemas.BoolSchema
            allow_create_organization = schemas.BoolSchema
            allow_git_hook = schemas.BoolSchema
            allow_import_local = schemas.BoolSchema
            description = schemas.StrSchema
            email = schemas.StrSchema
            full_name = schemas.StrSchema
            location = schemas.StrSchema
            max_repo_creation = schemas.Int64Schema
            must_change_password = schemas.BoolSchema
            password = schemas.StrSchema
            prohibit_login = schemas.BoolSchema
            restricted = schemas.BoolSchema
            visibility = schemas.StrSchema
            website = schemas.StrSchema
            __annotations__ = {
                "login_name": login_name,
                "source_id": source_id,
                "active": active,
                "admin": admin,
                "allow_create_organization": allow_create_organization,
                "allow_git_hook": allow_git_hook,
                "allow_import_local": allow_import_local,
                "description": description,
                "email": email,
                "full_name": full_name,
                "location": location,
                "max_repo_creation": max_repo_creation,
                "must_change_password": must_change_password,
                "password": password,
                "prohibit_login": prohibit_login,
                "restricted": restricted,
                "visibility": visibility,
                "website": website,
            }
    
    login_name: MetaOapg.properties.login_name
    source_id: MetaOapg.properties.source_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["login_name"]) -> MetaOapg.properties.login_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source_id"]) -> MetaOapg.properties.source_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["admin"]) -> MetaOapg.properties.admin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allow_create_organization"]) -> MetaOapg.properties.allow_create_organization: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allow_git_hook"]) -> MetaOapg.properties.allow_git_hook: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allow_import_local"]) -> MetaOapg.properties.allow_import_local: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["full_name"]) -> MetaOapg.properties.full_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location"]) -> MetaOapg.properties.location: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_repo_creation"]) -> MetaOapg.properties.max_repo_creation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["must_change_password"]) -> MetaOapg.properties.must_change_password: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["password"]) -> MetaOapg.properties.password: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prohibit_login"]) -> MetaOapg.properties.prohibit_login: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["restricted"]) -> MetaOapg.properties.restricted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["visibility"]) -> MetaOapg.properties.visibility: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["website"]) -> MetaOapg.properties.website: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["login_name", "source_id", "active", "admin", "allow_create_organization", "allow_git_hook", "allow_import_local", "description", "email", "full_name", "location", "max_repo_creation", "must_change_password", "password", "prohibit_login", "restricted", "visibility", "website", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["login_name"]) -> MetaOapg.properties.login_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source_id"]) -> MetaOapg.properties.source_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["active"]) -> typing.Union[MetaOapg.properties.active, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["admin"]) -> typing.Union[MetaOapg.properties.admin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allow_create_organization"]) -> typing.Union[MetaOapg.properties.allow_create_organization, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allow_git_hook"]) -> typing.Union[MetaOapg.properties.allow_git_hook, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allow_import_local"]) -> typing.Union[MetaOapg.properties.allow_import_local, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["full_name"]) -> typing.Union[MetaOapg.properties.full_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location"]) -> typing.Union[MetaOapg.properties.location, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_repo_creation"]) -> typing.Union[MetaOapg.properties.max_repo_creation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["must_change_password"]) -> typing.Union[MetaOapg.properties.must_change_password, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["password"]) -> typing.Union[MetaOapg.properties.password, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prohibit_login"]) -> typing.Union[MetaOapg.properties.prohibit_login, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["restricted"]) -> typing.Union[MetaOapg.properties.restricted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["visibility"]) -> typing.Union[MetaOapg.properties.visibility, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["website"]) -> typing.Union[MetaOapg.properties.website, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["login_name", "source_id", "active", "admin", "allow_create_organization", "allow_git_hook", "allow_import_local", "description", "email", "full_name", "location", "max_repo_creation", "must_change_password", "password", "prohibit_login", "restricted", "visibility", "website", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        login_name: typing.Union[MetaOapg.properties.login_name, str, ],
        source_id: typing.Union[MetaOapg.properties.source_id, decimal.Decimal, int, ],
        active: typing.Union[MetaOapg.properties.active, bool, schemas.Unset] = schemas.unset,
        admin: typing.Union[MetaOapg.properties.admin, bool, schemas.Unset] = schemas.unset,
        allow_create_organization: typing.Union[MetaOapg.properties.allow_create_organization, bool, schemas.Unset] = schemas.unset,
        allow_git_hook: typing.Union[MetaOapg.properties.allow_git_hook, bool, schemas.Unset] = schemas.unset,
        allow_import_local: typing.Union[MetaOapg.properties.allow_import_local, bool, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        email: typing.Union[MetaOapg.properties.email, str, schemas.Unset] = schemas.unset,
        full_name: typing.Union[MetaOapg.properties.full_name, str, schemas.Unset] = schemas.unset,
        location: typing.Union[MetaOapg.properties.location, str, schemas.Unset] = schemas.unset,
        max_repo_creation: typing.Union[MetaOapg.properties.max_repo_creation, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        must_change_password: typing.Union[MetaOapg.properties.must_change_password, bool, schemas.Unset] = schemas.unset,
        password: typing.Union[MetaOapg.properties.password, str, schemas.Unset] = schemas.unset,
        prohibit_login: typing.Union[MetaOapg.properties.prohibit_login, bool, schemas.Unset] = schemas.unset,
        restricted: typing.Union[MetaOapg.properties.restricted, bool, schemas.Unset] = schemas.unset,
        visibility: typing.Union[MetaOapg.properties.visibility, str, schemas.Unset] = schemas.unset,
        website: typing.Union[MetaOapg.properties.website, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EditUserOption':
        return super().__new__(
            cls,
            *_args,
            login_name=login_name,
            source_id=source_id,
            active=active,
            admin=admin,
            allow_create_organization=allow_create_organization,
            allow_git_hook=allow_git_hook,
            allow_import_local=allow_import_local,
            description=description,
            email=email,
            full_name=full_name,
            location=location,
            max_repo_creation=max_repo_creation,
            must_change_password=must_change_password,
            password=password,
            prohibit_login=prohibit_login,
            restricted=restricted,
            visibility=visibility,
            website=website,
            _configuration=_configuration,
            **kwargs,
        )
