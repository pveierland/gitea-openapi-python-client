# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.19.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class Tag(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Tag represents a repository tag
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def commit() -> typing.Type['CommitMeta']:
                return CommitMeta
            id = schemas.StrSchema
            message = schemas.StrSchema
            name = schemas.StrSchema
            tarball_url = schemas.StrSchema
            zipball_url = schemas.StrSchema
            __annotations__ = {
                "commit": commit,
                "id": id,
                "message": message,
                "name": name,
                "tarball_url": tarball_url,
                "zipball_url": zipball_url,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["commit"]) -> 'CommitMeta': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tarball_url"]) -> MetaOapg.properties.tarball_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zipball_url"]) -> MetaOapg.properties.zipball_url: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["commit", "id", "message", "name", "tarball_url", "zipball_url", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["commit"]) -> typing.Union['CommitMeta', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> typing.Union[MetaOapg.properties.message, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tarball_url"]) -> typing.Union[MetaOapg.properties.tarball_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zipball_url"]) -> typing.Union[MetaOapg.properties.zipball_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["commit", "id", "message", "name", "tarball_url", "zipball_url", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        commit: typing.Union['CommitMeta', schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        message: typing.Union[MetaOapg.properties.message, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        tarball_url: typing.Union[MetaOapg.properties.tarball_url, str, schemas.Unset] = schemas.unset,
        zipball_url: typing.Union[MetaOapg.properties.zipball_url, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Tag':
        return super().__new__(
            cls,
            *_args,
            commit=commit,
            id=id,
            message=message,
            name=name,
            tarball_url=tarball_url,
            zipball_url=zipball_url,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.commit_meta import CommitMeta
