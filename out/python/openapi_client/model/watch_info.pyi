# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.19.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class WatchInfo(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    WatchInfo represents an API watch status of one repository
    """


    class MetaOapg:
        
        class properties:
            created_at = schemas.DateTimeSchema
            ignored = schemas.BoolSchema
            reason = schemas.DictSchema
            repository_url = schemas.StrSchema
            subscribed = schemas.BoolSchema
            url = schemas.StrSchema
            __annotations__ = {
                "created_at": created_at,
                "ignored": ignored,
                "reason": reason,
                "repository_url": repository_url,
                "subscribed": subscribed,
                "url": url,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ignored"]) -> MetaOapg.properties.ignored: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reason"]) -> MetaOapg.properties.reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["repository_url"]) -> MetaOapg.properties.repository_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subscribed"]) -> MetaOapg.properties.subscribed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["created_at", "ignored", "reason", "repository_url", "subscribed", "url", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ignored"]) -> typing.Union[MetaOapg.properties.ignored, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reason"]) -> typing.Union[MetaOapg.properties.reason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["repository_url"]) -> typing.Union[MetaOapg.properties.repository_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subscribed"]) -> typing.Union[MetaOapg.properties.subscribed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["created_at", "ignored", "reason", "repository_url", "subscribed", "url", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, schemas.Unset] = schemas.unset,
        ignored: typing.Union[MetaOapg.properties.ignored, bool, schemas.Unset] = schemas.unset,
        reason: typing.Union[MetaOapg.properties.reason, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        repository_url: typing.Union[MetaOapg.properties.repository_url, str, schemas.Unset] = schemas.unset,
        subscribed: typing.Union[MetaOapg.properties.subscribed, bool, schemas.Unset] = schemas.unset,
        url: typing.Union[MetaOapg.properties.url, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WatchInfo':
        return super().__new__(
            cls,
            *_args,
            created_at=created_at,
            ignored=ignored,
            reason=reason,
            repository_url=repository_url,
            subscribed=subscribed,
            url=url,
            _configuration=_configuration,
            **kwargs,
        )
