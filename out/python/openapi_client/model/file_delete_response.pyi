# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.19.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class FileDeleteResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    FileDeleteResponse contains information about a repo's file that was deleted
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def commit() -> typing.Type['FileCommitResponse']:
                return FileCommitResponse
            content = schemas.DictSchema
        
            @staticmethod
            def verification() -> typing.Type['PayloadCommitVerification']:
                return PayloadCommitVerification
            __annotations__ = {
                "commit": commit,
                "content": content,
                "verification": verification,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["commit"]) -> 'FileCommitResponse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["content"]) -> MetaOapg.properties.content: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["verification"]) -> 'PayloadCommitVerification': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["commit", "content", "verification", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["commit"]) -> typing.Union['FileCommitResponse', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["content"]) -> typing.Union[MetaOapg.properties.content, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["verification"]) -> typing.Union['PayloadCommitVerification', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["commit", "content", "verification", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        commit: typing.Union['FileCommitResponse', schemas.Unset] = schemas.unset,
        content: typing.Union[MetaOapg.properties.content, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        verification: typing.Union['PayloadCommitVerification', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FileDeleteResponse':
        return super().__new__(
            cls,
            *_args,
            commit=commit,
            content=content,
            verification=verification,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.file_commit_response import FileCommitResponse
from openapi_client.model.payload_commit_verification import PayloadCommitVerification
