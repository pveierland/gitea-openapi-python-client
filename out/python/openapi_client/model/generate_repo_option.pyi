# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.19.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class GenerateRepoOption(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    GenerateRepoOption options when creating repository using a template
    """


    class MetaOapg:
        required = {
            "owner",
            "name",
        }
        
        class properties:
            name = schemas.StrSchema
            owner = schemas.StrSchema
            avatar = schemas.BoolSchema
            default_branch = schemas.StrSchema
            description = schemas.StrSchema
            git_content = schemas.BoolSchema
            git_hooks = schemas.BoolSchema
            labels = schemas.BoolSchema
            private = schemas.BoolSchema
            topics = schemas.BoolSchema
            webhooks = schemas.BoolSchema
            __annotations__ = {
                "name": name,
                "owner": owner,
                "avatar": avatar,
                "default_branch": default_branch,
                "description": description,
                "git_content": git_content,
                "git_hooks": git_hooks,
                "labels": labels,
                "private": private,
                "topics": topics,
                "webhooks": webhooks,
            }
    
    owner: MetaOapg.properties.owner
    name: MetaOapg.properties.name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner"]) -> MetaOapg.properties.owner: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["avatar"]) -> MetaOapg.properties.avatar: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["default_branch"]) -> MetaOapg.properties.default_branch: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["git_content"]) -> MetaOapg.properties.git_content: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["git_hooks"]) -> MetaOapg.properties.git_hooks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["labels"]) -> MetaOapg.properties.labels: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["private"]) -> MetaOapg.properties.private: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["topics"]) -> MetaOapg.properties.topics: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["webhooks"]) -> MetaOapg.properties.webhooks: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "owner", "avatar", "default_branch", "description", "git_content", "git_hooks", "labels", "private", "topics", "webhooks", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner"]) -> MetaOapg.properties.owner: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["avatar"]) -> typing.Union[MetaOapg.properties.avatar, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["default_branch"]) -> typing.Union[MetaOapg.properties.default_branch, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["git_content"]) -> typing.Union[MetaOapg.properties.git_content, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["git_hooks"]) -> typing.Union[MetaOapg.properties.git_hooks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["labels"]) -> typing.Union[MetaOapg.properties.labels, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["private"]) -> typing.Union[MetaOapg.properties.private, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["topics"]) -> typing.Union[MetaOapg.properties.topics, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["webhooks"]) -> typing.Union[MetaOapg.properties.webhooks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "owner", "avatar", "default_branch", "description", "git_content", "git_hooks", "labels", "private", "topics", "webhooks", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        owner: typing.Union[MetaOapg.properties.owner, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        avatar: typing.Union[MetaOapg.properties.avatar, bool, schemas.Unset] = schemas.unset,
        default_branch: typing.Union[MetaOapg.properties.default_branch, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        git_content: typing.Union[MetaOapg.properties.git_content, bool, schemas.Unset] = schemas.unset,
        git_hooks: typing.Union[MetaOapg.properties.git_hooks, bool, schemas.Unset] = schemas.unset,
        labels: typing.Union[MetaOapg.properties.labels, bool, schemas.Unset] = schemas.unset,
        private: typing.Union[MetaOapg.properties.private, bool, schemas.Unset] = schemas.unset,
        topics: typing.Union[MetaOapg.properties.topics, bool, schemas.Unset] = schemas.unset,
        webhooks: typing.Union[MetaOapg.properties.webhooks, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GenerateRepoOption':
        return super().__new__(
            cls,
            *_args,
            owner=owner,
            name=name,
            avatar=avatar,
            default_branch=default_branch,
            description=description,
            git_content=git_content,
            git_hooks=git_hooks,
            labels=labels,
            private=private,
            topics=topics,
            webhooks=webhooks,
            _configuration=_configuration,
            **kwargs,
        )
