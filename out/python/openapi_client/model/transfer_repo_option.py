# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.19.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class TransferRepoOption(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    TransferRepoOption options when transfer a repository's ownership
    """


    class MetaOapg:
        required = {
            "new_owner",
        }
        
        class properties:
            new_owner = schemas.StrSchema
            
            
            class team_ids(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.Int64Schema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'team_ids':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "new_owner": new_owner,
                "team_ids": team_ids,
            }
    
    new_owner: MetaOapg.properties.new_owner
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["new_owner"]) -> MetaOapg.properties.new_owner: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["team_ids"]) -> MetaOapg.properties.team_ids: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["new_owner", "team_ids", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["new_owner"]) -> MetaOapg.properties.new_owner: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["team_ids"]) -> typing.Union[MetaOapg.properties.team_ids, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["new_owner", "team_ids", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        new_owner: typing.Union[MetaOapg.properties.new_owner, str, ],
        team_ids: typing.Union[MetaOapg.properties.team_ids, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TransferRepoOption':
        return super().__new__(
            cls,
            *_args,
            new_owner=new_owner,
            team_ids=team_ids,
            _configuration=_configuration,
            **kwargs,
        )
