# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.19.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class BranchProtection(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    BranchProtection represents a branch protection for a repository
    """


    class MetaOapg:
        
        class properties:
            
            
            class approvals_whitelist_teams(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'approvals_whitelist_teams':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class approvals_whitelist_username(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'approvals_whitelist_username':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            block_on_official_review_requests = schemas.BoolSchema
            block_on_outdated_branch = schemas.BoolSchema
            block_on_rejected_reviews = schemas.BoolSchema
            branch_name = schemas.StrSchema
            created_at = schemas.DateTimeSchema
            dismiss_stale_approvals = schemas.BoolSchema
            enable_approvals_whitelist = schemas.BoolSchema
            enable_merge_whitelist = schemas.BoolSchema
            enable_push = schemas.BoolSchema
            enable_push_whitelist = schemas.BoolSchema
            enable_status_check = schemas.BoolSchema
            
            
            class merge_whitelist_teams(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'merge_whitelist_teams':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class merge_whitelist_usernames(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'merge_whitelist_usernames':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            protected_file_patterns = schemas.StrSchema
            push_whitelist_deploy_keys = schemas.BoolSchema
            
            
            class push_whitelist_teams(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'push_whitelist_teams':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class push_whitelist_usernames(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'push_whitelist_usernames':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            require_signed_commits = schemas.BoolSchema
            required_approvals = schemas.Int64Schema
            rule_name = schemas.StrSchema
            
            
            class status_check_contexts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'status_check_contexts':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            unprotected_file_patterns = schemas.StrSchema
            updated_at = schemas.DateTimeSchema
            __annotations__ = {
                "approvals_whitelist_teams": approvals_whitelist_teams,
                "approvals_whitelist_username": approvals_whitelist_username,
                "block_on_official_review_requests": block_on_official_review_requests,
                "block_on_outdated_branch": block_on_outdated_branch,
                "block_on_rejected_reviews": block_on_rejected_reviews,
                "branch_name": branch_name,
                "created_at": created_at,
                "dismiss_stale_approvals": dismiss_stale_approvals,
                "enable_approvals_whitelist": enable_approvals_whitelist,
                "enable_merge_whitelist": enable_merge_whitelist,
                "enable_push": enable_push,
                "enable_push_whitelist": enable_push_whitelist,
                "enable_status_check": enable_status_check,
                "merge_whitelist_teams": merge_whitelist_teams,
                "merge_whitelist_usernames": merge_whitelist_usernames,
                "protected_file_patterns": protected_file_patterns,
                "push_whitelist_deploy_keys": push_whitelist_deploy_keys,
                "push_whitelist_teams": push_whitelist_teams,
                "push_whitelist_usernames": push_whitelist_usernames,
                "require_signed_commits": require_signed_commits,
                "required_approvals": required_approvals,
                "rule_name": rule_name,
                "status_check_contexts": status_check_contexts,
                "unprotected_file_patterns": unprotected_file_patterns,
                "updated_at": updated_at,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approvals_whitelist_teams"]) -> MetaOapg.properties.approvals_whitelist_teams: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approvals_whitelist_username"]) -> MetaOapg.properties.approvals_whitelist_username: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["block_on_official_review_requests"]) -> MetaOapg.properties.block_on_official_review_requests: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["block_on_outdated_branch"]) -> MetaOapg.properties.block_on_outdated_branch: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["block_on_rejected_reviews"]) -> MetaOapg.properties.block_on_rejected_reviews: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["branch_name"]) -> MetaOapg.properties.branch_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dismiss_stale_approvals"]) -> MetaOapg.properties.dismiss_stale_approvals: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable_approvals_whitelist"]) -> MetaOapg.properties.enable_approvals_whitelist: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable_merge_whitelist"]) -> MetaOapg.properties.enable_merge_whitelist: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable_push"]) -> MetaOapg.properties.enable_push: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable_push_whitelist"]) -> MetaOapg.properties.enable_push_whitelist: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable_status_check"]) -> MetaOapg.properties.enable_status_check: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merge_whitelist_teams"]) -> MetaOapg.properties.merge_whitelist_teams: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merge_whitelist_usernames"]) -> MetaOapg.properties.merge_whitelist_usernames: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["protected_file_patterns"]) -> MetaOapg.properties.protected_file_patterns: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["push_whitelist_deploy_keys"]) -> MetaOapg.properties.push_whitelist_deploy_keys: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["push_whitelist_teams"]) -> MetaOapg.properties.push_whitelist_teams: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["push_whitelist_usernames"]) -> MetaOapg.properties.push_whitelist_usernames: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["require_signed_commits"]) -> MetaOapg.properties.require_signed_commits: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["required_approvals"]) -> MetaOapg.properties.required_approvals: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rule_name"]) -> MetaOapg.properties.rule_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status_check_contexts"]) -> MetaOapg.properties.status_check_contexts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unprotected_file_patterns"]) -> MetaOapg.properties.unprotected_file_patterns: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["approvals_whitelist_teams", "approvals_whitelist_username", "block_on_official_review_requests", "block_on_outdated_branch", "block_on_rejected_reviews", "branch_name", "created_at", "dismiss_stale_approvals", "enable_approvals_whitelist", "enable_merge_whitelist", "enable_push", "enable_push_whitelist", "enable_status_check", "merge_whitelist_teams", "merge_whitelist_usernames", "protected_file_patterns", "push_whitelist_deploy_keys", "push_whitelist_teams", "push_whitelist_usernames", "require_signed_commits", "required_approvals", "rule_name", "status_check_contexts", "unprotected_file_patterns", "updated_at", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approvals_whitelist_teams"]) -> typing.Union[MetaOapg.properties.approvals_whitelist_teams, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approvals_whitelist_username"]) -> typing.Union[MetaOapg.properties.approvals_whitelist_username, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["block_on_official_review_requests"]) -> typing.Union[MetaOapg.properties.block_on_official_review_requests, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["block_on_outdated_branch"]) -> typing.Union[MetaOapg.properties.block_on_outdated_branch, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["block_on_rejected_reviews"]) -> typing.Union[MetaOapg.properties.block_on_rejected_reviews, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["branch_name"]) -> typing.Union[MetaOapg.properties.branch_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dismiss_stale_approvals"]) -> typing.Union[MetaOapg.properties.dismiss_stale_approvals, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable_approvals_whitelist"]) -> typing.Union[MetaOapg.properties.enable_approvals_whitelist, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable_merge_whitelist"]) -> typing.Union[MetaOapg.properties.enable_merge_whitelist, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable_push"]) -> typing.Union[MetaOapg.properties.enable_push, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable_push_whitelist"]) -> typing.Union[MetaOapg.properties.enable_push_whitelist, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable_status_check"]) -> typing.Union[MetaOapg.properties.enable_status_check, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merge_whitelist_teams"]) -> typing.Union[MetaOapg.properties.merge_whitelist_teams, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merge_whitelist_usernames"]) -> typing.Union[MetaOapg.properties.merge_whitelist_usernames, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["protected_file_patterns"]) -> typing.Union[MetaOapg.properties.protected_file_patterns, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["push_whitelist_deploy_keys"]) -> typing.Union[MetaOapg.properties.push_whitelist_deploy_keys, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["push_whitelist_teams"]) -> typing.Union[MetaOapg.properties.push_whitelist_teams, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["push_whitelist_usernames"]) -> typing.Union[MetaOapg.properties.push_whitelist_usernames, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["require_signed_commits"]) -> typing.Union[MetaOapg.properties.require_signed_commits, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["required_approvals"]) -> typing.Union[MetaOapg.properties.required_approvals, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rule_name"]) -> typing.Union[MetaOapg.properties.rule_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status_check_contexts"]) -> typing.Union[MetaOapg.properties.status_check_contexts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unprotected_file_patterns"]) -> typing.Union[MetaOapg.properties.unprotected_file_patterns, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> typing.Union[MetaOapg.properties.updated_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["approvals_whitelist_teams", "approvals_whitelist_username", "block_on_official_review_requests", "block_on_outdated_branch", "block_on_rejected_reviews", "branch_name", "created_at", "dismiss_stale_approvals", "enable_approvals_whitelist", "enable_merge_whitelist", "enable_push", "enable_push_whitelist", "enable_status_check", "merge_whitelist_teams", "merge_whitelist_usernames", "protected_file_patterns", "push_whitelist_deploy_keys", "push_whitelist_teams", "push_whitelist_usernames", "require_signed_commits", "required_approvals", "rule_name", "status_check_contexts", "unprotected_file_patterns", "updated_at", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        approvals_whitelist_teams: typing.Union[MetaOapg.properties.approvals_whitelist_teams, list, tuple, schemas.Unset] = schemas.unset,
        approvals_whitelist_username: typing.Union[MetaOapg.properties.approvals_whitelist_username, list, tuple, schemas.Unset] = schemas.unset,
        block_on_official_review_requests: typing.Union[MetaOapg.properties.block_on_official_review_requests, bool, schemas.Unset] = schemas.unset,
        block_on_outdated_branch: typing.Union[MetaOapg.properties.block_on_outdated_branch, bool, schemas.Unset] = schemas.unset,
        block_on_rejected_reviews: typing.Union[MetaOapg.properties.block_on_rejected_reviews, bool, schemas.Unset] = schemas.unset,
        branch_name: typing.Union[MetaOapg.properties.branch_name, str, schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, schemas.Unset] = schemas.unset,
        dismiss_stale_approvals: typing.Union[MetaOapg.properties.dismiss_stale_approvals, bool, schemas.Unset] = schemas.unset,
        enable_approvals_whitelist: typing.Union[MetaOapg.properties.enable_approvals_whitelist, bool, schemas.Unset] = schemas.unset,
        enable_merge_whitelist: typing.Union[MetaOapg.properties.enable_merge_whitelist, bool, schemas.Unset] = schemas.unset,
        enable_push: typing.Union[MetaOapg.properties.enable_push, bool, schemas.Unset] = schemas.unset,
        enable_push_whitelist: typing.Union[MetaOapg.properties.enable_push_whitelist, bool, schemas.Unset] = schemas.unset,
        enable_status_check: typing.Union[MetaOapg.properties.enable_status_check, bool, schemas.Unset] = schemas.unset,
        merge_whitelist_teams: typing.Union[MetaOapg.properties.merge_whitelist_teams, list, tuple, schemas.Unset] = schemas.unset,
        merge_whitelist_usernames: typing.Union[MetaOapg.properties.merge_whitelist_usernames, list, tuple, schemas.Unset] = schemas.unset,
        protected_file_patterns: typing.Union[MetaOapg.properties.protected_file_patterns, str, schemas.Unset] = schemas.unset,
        push_whitelist_deploy_keys: typing.Union[MetaOapg.properties.push_whitelist_deploy_keys, bool, schemas.Unset] = schemas.unset,
        push_whitelist_teams: typing.Union[MetaOapg.properties.push_whitelist_teams, list, tuple, schemas.Unset] = schemas.unset,
        push_whitelist_usernames: typing.Union[MetaOapg.properties.push_whitelist_usernames, list, tuple, schemas.Unset] = schemas.unset,
        require_signed_commits: typing.Union[MetaOapg.properties.require_signed_commits, bool, schemas.Unset] = schemas.unset,
        required_approvals: typing.Union[MetaOapg.properties.required_approvals, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        rule_name: typing.Union[MetaOapg.properties.rule_name, str, schemas.Unset] = schemas.unset,
        status_check_contexts: typing.Union[MetaOapg.properties.status_check_contexts, list, tuple, schemas.Unset] = schemas.unset,
        unprotected_file_patterns: typing.Union[MetaOapg.properties.unprotected_file_patterns, str, schemas.Unset] = schemas.unset,
        updated_at: typing.Union[MetaOapg.properties.updated_at, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BranchProtection':
        return super().__new__(
            cls,
            *_args,
            approvals_whitelist_teams=approvals_whitelist_teams,
            approvals_whitelist_username=approvals_whitelist_username,
            block_on_official_review_requests=block_on_official_review_requests,
            block_on_outdated_branch=block_on_outdated_branch,
            block_on_rejected_reviews=block_on_rejected_reviews,
            branch_name=branch_name,
            created_at=created_at,
            dismiss_stale_approvals=dismiss_stale_approvals,
            enable_approvals_whitelist=enable_approvals_whitelist,
            enable_merge_whitelist=enable_merge_whitelist,
            enable_push=enable_push,
            enable_push_whitelist=enable_push_whitelist,
            enable_status_check=enable_status_check,
            merge_whitelist_teams=merge_whitelist_teams,
            merge_whitelist_usernames=merge_whitelist_usernames,
            protected_file_patterns=protected_file_patterns,
            push_whitelist_deploy_keys=push_whitelist_deploy_keys,
            push_whitelist_teams=push_whitelist_teams,
            push_whitelist_usernames=push_whitelist_usernames,
            require_signed_commits=require_signed_commits,
            required_approvals=required_approvals,
            rule_name=rule_name,
            status_check_contexts=status_check_contexts,
            unprotected_file_patterns=unprotected_file_patterns,
            updated_at=updated_at,
            _configuration=_configuration,
            **kwargs,
        )
