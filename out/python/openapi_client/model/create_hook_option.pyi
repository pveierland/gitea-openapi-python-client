# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.19.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class CreateHookOption(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    CreateHookOption options when create a hook
    """


    class MetaOapg:
        required = {
            "type",
            "config",
        }
        
        class properties:
        
            @staticmethod
            def config() -> typing.Type['CreateHookOptionConfig']:
                return CreateHookOptionConfig
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def DINGTALK(cls):
                    return cls("dingtalk")
                
                @schemas.classproperty
                def DISCORD(cls):
                    return cls("discord")
                
                @schemas.classproperty
                def GITEA(cls):
                    return cls("gitea")
                
                @schemas.classproperty
                def GOGS(cls):
                    return cls("gogs")
                
                @schemas.classproperty
                def MSTEAMS(cls):
                    return cls("msteams")
                
                @schemas.classproperty
                def SLACK(cls):
                    return cls("slack")
                
                @schemas.classproperty
                def TELEGRAM(cls):
                    return cls("telegram")
                
                @schemas.classproperty
                def FEISHU(cls):
                    return cls("feishu")
                
                @schemas.classproperty
                def WECHATWORK(cls):
                    return cls("wechatwork")
                
                @schemas.classproperty
                def PACKAGIST(cls):
                    return cls("packagist")
            active = schemas.BoolSchema
            authorization_header = schemas.StrSchema
            branch_filter = schemas.StrSchema
            
            
            class events(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'events':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "config": config,
                "type": type,
                "active": active,
                "authorization_header": authorization_header,
                "branch_filter": branch_filter,
                "events": events,
            }
    
    type: MetaOapg.properties.type
    config: 'CreateHookOptionConfig'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["config"]) -> 'CreateHookOptionConfig': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authorization_header"]) -> MetaOapg.properties.authorization_header: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["branch_filter"]) -> MetaOapg.properties.branch_filter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["events"]) -> MetaOapg.properties.events: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["config", "type", "active", "authorization_header", "branch_filter", "events", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["config"]) -> 'CreateHookOptionConfig': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["active"]) -> typing.Union[MetaOapg.properties.active, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authorization_header"]) -> typing.Union[MetaOapg.properties.authorization_header, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["branch_filter"]) -> typing.Union[MetaOapg.properties.branch_filter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["events"]) -> typing.Union[MetaOapg.properties.events, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["config", "type", "active", "authorization_header", "branch_filter", "events", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        config: 'CreateHookOptionConfig',
        active: typing.Union[MetaOapg.properties.active, bool, schemas.Unset] = schemas.unset,
        authorization_header: typing.Union[MetaOapg.properties.authorization_header, str, schemas.Unset] = schemas.unset,
        branch_filter: typing.Union[MetaOapg.properties.branch_filter, str, schemas.Unset] = schemas.unset,
        events: typing.Union[MetaOapg.properties.events, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreateHookOption':
        return super().__new__(
            cls,
            *_args,
            type=type,
            config=config,
            active=active,
            authorization_header=authorization_header,
            branch_filter=branch_filter,
            events=events,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.create_hook_option_config import CreateHookOptionConfig
