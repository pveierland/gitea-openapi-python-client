# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.19.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class ChangedFile(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    ChangedFile store information about files affected by the pull request
    """


    class MetaOapg:
        
        class properties:
            additions = schemas.Int64Schema
            changes = schemas.Int64Schema
            contents_url = schemas.StrSchema
            deletions = schemas.Int64Schema
            filename = schemas.StrSchema
            html_url = schemas.StrSchema
            previous_filename = schemas.StrSchema
            raw_url = schemas.StrSchema
            status = schemas.StrSchema
            __annotations__ = {
                "additions": additions,
                "changes": changes,
                "contents_url": contents_url,
                "deletions": deletions,
                "filename": filename,
                "html_url": html_url,
                "previous_filename": previous_filename,
                "raw_url": raw_url,
                "status": status,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additions"]) -> MetaOapg.properties.additions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["changes"]) -> MetaOapg.properties.changes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contents_url"]) -> MetaOapg.properties.contents_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deletions"]) -> MetaOapg.properties.deletions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filename"]) -> MetaOapg.properties.filename: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["html_url"]) -> MetaOapg.properties.html_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["previous_filename"]) -> MetaOapg.properties.previous_filename: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["raw_url"]) -> MetaOapg.properties.raw_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["additions", "changes", "contents_url", "deletions", "filename", "html_url", "previous_filename", "raw_url", "status", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additions"]) -> typing.Union[MetaOapg.properties.additions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["changes"]) -> typing.Union[MetaOapg.properties.changes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contents_url"]) -> typing.Union[MetaOapg.properties.contents_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deletions"]) -> typing.Union[MetaOapg.properties.deletions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filename"]) -> typing.Union[MetaOapg.properties.filename, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["html_url"]) -> typing.Union[MetaOapg.properties.html_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["previous_filename"]) -> typing.Union[MetaOapg.properties.previous_filename, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["raw_url"]) -> typing.Union[MetaOapg.properties.raw_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["additions", "changes", "contents_url", "deletions", "filename", "html_url", "previous_filename", "raw_url", "status", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        additions: typing.Union[MetaOapg.properties.additions, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        changes: typing.Union[MetaOapg.properties.changes, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        contents_url: typing.Union[MetaOapg.properties.contents_url, str, schemas.Unset] = schemas.unset,
        deletions: typing.Union[MetaOapg.properties.deletions, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        filename: typing.Union[MetaOapg.properties.filename, str, schemas.Unset] = schemas.unset,
        html_url: typing.Union[MetaOapg.properties.html_url, str, schemas.Unset] = schemas.unset,
        previous_filename: typing.Union[MetaOapg.properties.previous_filename, str, schemas.Unset] = schemas.unset,
        raw_url: typing.Union[MetaOapg.properties.raw_url, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ChangedFile':
        return super().__new__(
            cls,
            *_args,
            additions=additions,
            changes=changes,
            contents_url=contents_url,
            deletions=deletions,
            filename=filename,
            html_url=html_url,
            previous_filename=previous_filename,
            raw_url=raw_url,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )
