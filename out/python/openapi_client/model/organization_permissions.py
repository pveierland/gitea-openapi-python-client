# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.19.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class OrganizationPermissions(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    OrganizationPermissions list different users permissions on an organization
    """


    class MetaOapg:
        
        class properties:
            can_create_repository = schemas.BoolSchema
            can_read = schemas.BoolSchema
            can_write = schemas.BoolSchema
            is_admin = schemas.BoolSchema
            is_owner = schemas.BoolSchema
            __annotations__ = {
                "can_create_repository": can_create_repository,
                "can_read": can_read,
                "can_write": can_write,
                "is_admin": is_admin,
                "is_owner": is_owner,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_create_repository"]) -> MetaOapg.properties.can_create_repository: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_read"]) -> MetaOapg.properties.can_read: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_write"]) -> MetaOapg.properties.can_write: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_admin"]) -> MetaOapg.properties.is_admin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_owner"]) -> MetaOapg.properties.is_owner: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["can_create_repository", "can_read", "can_write", "is_admin", "is_owner", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_create_repository"]) -> typing.Union[MetaOapg.properties.can_create_repository, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_read"]) -> typing.Union[MetaOapg.properties.can_read, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_write"]) -> typing.Union[MetaOapg.properties.can_write, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_admin"]) -> typing.Union[MetaOapg.properties.is_admin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_owner"]) -> typing.Union[MetaOapg.properties.is_owner, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["can_create_repository", "can_read", "can_write", "is_admin", "is_owner", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        can_create_repository: typing.Union[MetaOapg.properties.can_create_repository, bool, schemas.Unset] = schemas.unset,
        can_read: typing.Union[MetaOapg.properties.can_read, bool, schemas.Unset] = schemas.unset,
        can_write: typing.Union[MetaOapg.properties.can_write, bool, schemas.Unset] = schemas.unset,
        is_admin: typing.Union[MetaOapg.properties.is_admin, bool, schemas.Unset] = schemas.unset,
        is_owner: typing.Union[MetaOapg.properties.is_owner, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OrganizationPermissions':
        return super().__new__(
            cls,
            *_args,
            can_create_repository=can_create_repository,
            can_read=can_read,
            can_write=can_write,
            is_admin=is_admin,
            is_owner=is_owner,
            _configuration=_configuration,
            **kwargs,
        )
