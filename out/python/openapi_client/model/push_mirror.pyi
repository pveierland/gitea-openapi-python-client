# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.19.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class PushMirror(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    PushMirror represents information of a push mirror
    """


    class MetaOapg:
        
        class properties:
            created = schemas.StrSchema
            interval = schemas.StrSchema
            last_error = schemas.StrSchema
            last_update = schemas.StrSchema
            remote_address = schemas.StrSchema
            remote_name = schemas.StrSchema
            repo_name = schemas.StrSchema
            sync_on_commit = schemas.BoolSchema
            __annotations__ = {
                "created": created,
                "interval": interval,
                "last_error": last_error,
                "last_update": last_update,
                "remote_address": remote_address,
                "remote_name": remote_name,
                "repo_name": repo_name,
                "sync_on_commit": sync_on_commit,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["interval"]) -> MetaOapg.properties.interval: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_error"]) -> MetaOapg.properties.last_error: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_update"]) -> MetaOapg.properties.last_update: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["remote_address"]) -> MetaOapg.properties.remote_address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["remote_name"]) -> MetaOapg.properties.remote_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["repo_name"]) -> MetaOapg.properties.repo_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sync_on_commit"]) -> MetaOapg.properties.sync_on_commit: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["created", "interval", "last_error", "last_update", "remote_address", "remote_name", "repo_name", "sync_on_commit", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> typing.Union[MetaOapg.properties.created, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["interval"]) -> typing.Union[MetaOapg.properties.interval, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_error"]) -> typing.Union[MetaOapg.properties.last_error, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_update"]) -> typing.Union[MetaOapg.properties.last_update, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["remote_address"]) -> typing.Union[MetaOapg.properties.remote_address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["remote_name"]) -> typing.Union[MetaOapg.properties.remote_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["repo_name"]) -> typing.Union[MetaOapg.properties.repo_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sync_on_commit"]) -> typing.Union[MetaOapg.properties.sync_on_commit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["created", "interval", "last_error", "last_update", "remote_address", "remote_name", "repo_name", "sync_on_commit", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        created: typing.Union[MetaOapg.properties.created, str, schemas.Unset] = schemas.unset,
        interval: typing.Union[MetaOapg.properties.interval, str, schemas.Unset] = schemas.unset,
        last_error: typing.Union[MetaOapg.properties.last_error, str, schemas.Unset] = schemas.unset,
        last_update: typing.Union[MetaOapg.properties.last_update, str, schemas.Unset] = schemas.unset,
        remote_address: typing.Union[MetaOapg.properties.remote_address, str, schemas.Unset] = schemas.unset,
        remote_name: typing.Union[MetaOapg.properties.remote_name, str, schemas.Unset] = schemas.unset,
        repo_name: typing.Union[MetaOapg.properties.repo_name, str, schemas.Unset] = schemas.unset,
        sync_on_commit: typing.Union[MetaOapg.properties.sync_on_commit, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PushMirror':
        return super().__new__(
            cls,
            *_args,
            created=created,
            interval=interval,
            last_error=last_error,
            last_update=last_update,
            remote_address=remote_address,
            remote_name=remote_name,
            repo_name=repo_name,
            sync_on_commit=sync_on_commit,
            _configuration=_configuration,
            **kwargs,
        )
