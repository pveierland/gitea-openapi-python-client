# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.19.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class CreateRepoOption(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    CreateRepoOption options when creating repository
    """


    class MetaOapg:
        required = {
            "name",
        }
        
        class properties:
            name = schemas.StrSchema
            auto_init = schemas.BoolSchema
            default_branch = schemas.StrSchema
            description = schemas.StrSchema
            gitignores = schemas.StrSchema
            issue_labels = schemas.StrSchema
            license = schemas.StrSchema
            private = schemas.BoolSchema
            readme = schemas.StrSchema
            template = schemas.BoolSchema
            
            
            class trust_model(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def DEFAULT(cls):
                    return cls("default")
                
                @schemas.classproperty
                def COLLABORATOR(cls):
                    return cls("collaborator")
                
                @schemas.classproperty
                def COMMITTER(cls):
                    return cls("committer")
                
                @schemas.classproperty
                def COLLABORATORCOMMITTER(cls):
                    return cls("collaboratorcommitter")
            __annotations__ = {
                "name": name,
                "auto_init": auto_init,
                "default_branch": default_branch,
                "description": description,
                "gitignores": gitignores,
                "issue_labels": issue_labels,
                "license": license,
                "private": private,
                "readme": readme,
                "template": template,
                "trust_model": trust_model,
            }
    
    name: MetaOapg.properties.name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auto_init"]) -> MetaOapg.properties.auto_init: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["default_branch"]) -> MetaOapg.properties.default_branch: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gitignores"]) -> MetaOapg.properties.gitignores: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["issue_labels"]) -> MetaOapg.properties.issue_labels: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["license"]) -> MetaOapg.properties.license: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["private"]) -> MetaOapg.properties.private: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["readme"]) -> MetaOapg.properties.readme: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["template"]) -> MetaOapg.properties.template: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trust_model"]) -> MetaOapg.properties.trust_model: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "auto_init", "default_branch", "description", "gitignores", "issue_labels", "license", "private", "readme", "template", "trust_model", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auto_init"]) -> typing.Union[MetaOapg.properties.auto_init, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["default_branch"]) -> typing.Union[MetaOapg.properties.default_branch, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gitignores"]) -> typing.Union[MetaOapg.properties.gitignores, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["issue_labels"]) -> typing.Union[MetaOapg.properties.issue_labels, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["license"]) -> typing.Union[MetaOapg.properties.license, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["private"]) -> typing.Union[MetaOapg.properties.private, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["readme"]) -> typing.Union[MetaOapg.properties.readme, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["template"]) -> typing.Union[MetaOapg.properties.template, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trust_model"]) -> typing.Union[MetaOapg.properties.trust_model, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "auto_init", "default_branch", "description", "gitignores", "issue_labels", "license", "private", "readme", "template", "trust_model", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        auto_init: typing.Union[MetaOapg.properties.auto_init, bool, schemas.Unset] = schemas.unset,
        default_branch: typing.Union[MetaOapg.properties.default_branch, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        gitignores: typing.Union[MetaOapg.properties.gitignores, str, schemas.Unset] = schemas.unset,
        issue_labels: typing.Union[MetaOapg.properties.issue_labels, str, schemas.Unset] = schemas.unset,
        license: typing.Union[MetaOapg.properties.license, str, schemas.Unset] = schemas.unset,
        private: typing.Union[MetaOapg.properties.private, bool, schemas.Unset] = schemas.unset,
        readme: typing.Union[MetaOapg.properties.readme, str, schemas.Unset] = schemas.unset,
        template: typing.Union[MetaOapg.properties.template, bool, schemas.Unset] = schemas.unset,
        trust_model: typing.Union[MetaOapg.properties.trust_model, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreateRepoOption':
        return super().__new__(
            cls,
            *_args,
            name=name,
            auto_init=auto_init,
            default_branch=default_branch,
            description=description,
            gitignores=gitignores,
            issue_labels=issue_labels,
            license=license,
            private=private,
            readme=readme,
            template=template,
            trust_model=trust_model,
            _configuration=_configuration,
            **kwargs,
        )
