# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.19.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class CreatePushMirrorOption(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            interval = schemas.StrSchema
            remote_address = schemas.StrSchema
            remote_password = schemas.StrSchema
            remote_username = schemas.StrSchema
            sync_on_commit = schemas.BoolSchema
            __annotations__ = {
                "interval": interval,
                "remote_address": remote_address,
                "remote_password": remote_password,
                "remote_username": remote_username,
                "sync_on_commit": sync_on_commit,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["interval"]) -> MetaOapg.properties.interval: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["remote_address"]) -> MetaOapg.properties.remote_address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["remote_password"]) -> MetaOapg.properties.remote_password: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["remote_username"]) -> MetaOapg.properties.remote_username: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sync_on_commit"]) -> MetaOapg.properties.sync_on_commit: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["interval", "remote_address", "remote_password", "remote_username", "sync_on_commit", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["interval"]) -> typing.Union[MetaOapg.properties.interval, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["remote_address"]) -> typing.Union[MetaOapg.properties.remote_address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["remote_password"]) -> typing.Union[MetaOapg.properties.remote_password, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["remote_username"]) -> typing.Union[MetaOapg.properties.remote_username, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sync_on_commit"]) -> typing.Union[MetaOapg.properties.sync_on_commit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["interval", "remote_address", "remote_password", "remote_username", "sync_on_commit", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        interval: typing.Union[MetaOapg.properties.interval, str, schemas.Unset] = schemas.unset,
        remote_address: typing.Union[MetaOapg.properties.remote_address, str, schemas.Unset] = schemas.unset,
        remote_password: typing.Union[MetaOapg.properties.remote_password, str, schemas.Unset] = schemas.unset,
        remote_username: typing.Union[MetaOapg.properties.remote_username, str, schemas.Unset] = schemas.unset,
        sync_on_commit: typing.Union[MetaOapg.properties.sync_on_commit, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreatePushMirrorOption':
        return super().__new__(
            cls,
            *_args,
            interval=interval,
            remote_address=remote_address,
            remote_password=remote_password,
            remote_username=remote_username,
            sync_on_commit=sync_on_commit,
            _configuration=_configuration,
            **kwargs,
        )
