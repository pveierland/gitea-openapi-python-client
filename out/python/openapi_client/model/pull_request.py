# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.19.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class PullRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    PullRequest represents a pull request
    """


    class MetaOapg:
        
        class properties:
            allow_maintainer_edit = schemas.BoolSchema
        
            @staticmethod
            def assignee() -> typing.Type['User']:
                return User
            
            
            class assignees(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['User']:
                        return User
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['User'], typing.List['User']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'assignees':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'User':
                    return super().__getitem__(i)
        
            @staticmethod
            def base() -> typing.Type['PRBranchInfo']:
                return PRBranchInfo
            body = schemas.StrSchema
            closed_at = schemas.DateTimeSchema
            comments = schemas.Int64Schema
            created_at = schemas.DateTimeSchema
            diff_url = schemas.StrSchema
            due_date = schemas.DateTimeSchema
        
            @staticmethod
            def head() -> typing.Type['PRBranchInfo']:
                return PRBranchInfo
            html_url = schemas.StrSchema
            id = schemas.Int64Schema
            is_locked = schemas.BoolSchema
            
            
            class labels(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Label']:
                        return Label
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Label'], typing.List['Label']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'labels':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Label':
                    return super().__getitem__(i)
            merge_base = schemas.StrSchema
            merge_commit_sha = schemas.StrSchema
            mergeable = schemas.BoolSchema
            merged = schemas.BoolSchema
            merged_at = schemas.DateTimeSchema
        
            @staticmethod
            def merged_by() -> typing.Type['User']:
                return User
        
            @staticmethod
            def milestone() -> typing.Type['Milestone']:
                return Milestone
            number = schemas.Int64Schema
            patch_url = schemas.StrSchema
            state = schemas.StrSchema
            title = schemas.StrSchema
            updated_at = schemas.DateTimeSchema
            url = schemas.StrSchema
        
            @staticmethod
            def user() -> typing.Type['User']:
                return User
            __annotations__ = {
                "allow_maintainer_edit": allow_maintainer_edit,
                "assignee": assignee,
                "assignees": assignees,
                "base": base,
                "body": body,
                "closed_at": closed_at,
                "comments": comments,
                "created_at": created_at,
                "diff_url": diff_url,
                "due_date": due_date,
                "head": head,
                "html_url": html_url,
                "id": id,
                "is_locked": is_locked,
                "labels": labels,
                "merge_base": merge_base,
                "merge_commit_sha": merge_commit_sha,
                "mergeable": mergeable,
                "merged": merged,
                "merged_at": merged_at,
                "merged_by": merged_by,
                "milestone": milestone,
                "number": number,
                "patch_url": patch_url,
                "state": state,
                "title": title,
                "updated_at": updated_at,
                "url": url,
                "user": user,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allow_maintainer_edit"]) -> MetaOapg.properties.allow_maintainer_edit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assignee"]) -> 'User': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assignees"]) -> MetaOapg.properties.assignees: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["base"]) -> 'PRBranchInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["body"]) -> MetaOapg.properties.body: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["closed_at"]) -> MetaOapg.properties.closed_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comments"]) -> MetaOapg.properties.comments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["diff_url"]) -> MetaOapg.properties.diff_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["due_date"]) -> MetaOapg.properties.due_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["head"]) -> 'PRBranchInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["html_url"]) -> MetaOapg.properties.html_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_locked"]) -> MetaOapg.properties.is_locked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["labels"]) -> MetaOapg.properties.labels: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merge_base"]) -> MetaOapg.properties.merge_base: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merge_commit_sha"]) -> MetaOapg.properties.merge_commit_sha: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mergeable"]) -> MetaOapg.properties.mergeable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merged"]) -> MetaOapg.properties.merged: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merged_at"]) -> MetaOapg.properties.merged_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merged_by"]) -> 'User': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["milestone"]) -> 'Milestone': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["number"]) -> MetaOapg.properties.number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["patch_url"]) -> MetaOapg.properties.patch_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'User': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["allow_maintainer_edit", "assignee", "assignees", "base", "body", "closed_at", "comments", "created_at", "diff_url", "due_date", "head", "html_url", "id", "is_locked", "labels", "merge_base", "merge_commit_sha", "mergeable", "merged", "merged_at", "merged_by", "milestone", "number", "patch_url", "state", "title", "updated_at", "url", "user", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allow_maintainer_edit"]) -> typing.Union[MetaOapg.properties.allow_maintainer_edit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assignee"]) -> typing.Union['User', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assignees"]) -> typing.Union[MetaOapg.properties.assignees, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["base"]) -> typing.Union['PRBranchInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["body"]) -> typing.Union[MetaOapg.properties.body, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["closed_at"]) -> typing.Union[MetaOapg.properties.closed_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comments"]) -> typing.Union[MetaOapg.properties.comments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["diff_url"]) -> typing.Union[MetaOapg.properties.diff_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["due_date"]) -> typing.Union[MetaOapg.properties.due_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["head"]) -> typing.Union['PRBranchInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["html_url"]) -> typing.Union[MetaOapg.properties.html_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_locked"]) -> typing.Union[MetaOapg.properties.is_locked, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["labels"]) -> typing.Union[MetaOapg.properties.labels, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merge_base"]) -> typing.Union[MetaOapg.properties.merge_base, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merge_commit_sha"]) -> typing.Union[MetaOapg.properties.merge_commit_sha, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mergeable"]) -> typing.Union[MetaOapg.properties.mergeable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merged"]) -> typing.Union[MetaOapg.properties.merged, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merged_at"]) -> typing.Union[MetaOapg.properties.merged_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merged_by"]) -> typing.Union['User', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["milestone"]) -> typing.Union['Milestone', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["number"]) -> typing.Union[MetaOapg.properties.number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["patch_url"]) -> typing.Union[MetaOapg.properties.patch_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> typing.Union[MetaOapg.properties.updated_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> typing.Union['User', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["allow_maintainer_edit", "assignee", "assignees", "base", "body", "closed_at", "comments", "created_at", "diff_url", "due_date", "head", "html_url", "id", "is_locked", "labels", "merge_base", "merge_commit_sha", "mergeable", "merged", "merged_at", "merged_by", "milestone", "number", "patch_url", "state", "title", "updated_at", "url", "user", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        allow_maintainer_edit: typing.Union[MetaOapg.properties.allow_maintainer_edit, bool, schemas.Unset] = schemas.unset,
        assignee: typing.Union['User', schemas.Unset] = schemas.unset,
        assignees: typing.Union[MetaOapg.properties.assignees, list, tuple, schemas.Unset] = schemas.unset,
        base: typing.Union['PRBranchInfo', schemas.Unset] = schemas.unset,
        body: typing.Union[MetaOapg.properties.body, str, schemas.Unset] = schemas.unset,
        closed_at: typing.Union[MetaOapg.properties.closed_at, str, datetime, schemas.Unset] = schemas.unset,
        comments: typing.Union[MetaOapg.properties.comments, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, schemas.Unset] = schemas.unset,
        diff_url: typing.Union[MetaOapg.properties.diff_url, str, schemas.Unset] = schemas.unset,
        due_date: typing.Union[MetaOapg.properties.due_date, str, datetime, schemas.Unset] = schemas.unset,
        head: typing.Union['PRBranchInfo', schemas.Unset] = schemas.unset,
        html_url: typing.Union[MetaOapg.properties.html_url, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        is_locked: typing.Union[MetaOapg.properties.is_locked, bool, schemas.Unset] = schemas.unset,
        labels: typing.Union[MetaOapg.properties.labels, list, tuple, schemas.Unset] = schemas.unset,
        merge_base: typing.Union[MetaOapg.properties.merge_base, str, schemas.Unset] = schemas.unset,
        merge_commit_sha: typing.Union[MetaOapg.properties.merge_commit_sha, str, schemas.Unset] = schemas.unset,
        mergeable: typing.Union[MetaOapg.properties.mergeable, bool, schemas.Unset] = schemas.unset,
        merged: typing.Union[MetaOapg.properties.merged, bool, schemas.Unset] = schemas.unset,
        merged_at: typing.Union[MetaOapg.properties.merged_at, str, datetime, schemas.Unset] = schemas.unset,
        merged_by: typing.Union['User', schemas.Unset] = schemas.unset,
        milestone: typing.Union['Milestone', schemas.Unset] = schemas.unset,
        number: typing.Union[MetaOapg.properties.number, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        patch_url: typing.Union[MetaOapg.properties.patch_url, str, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        updated_at: typing.Union[MetaOapg.properties.updated_at, str, datetime, schemas.Unset] = schemas.unset,
        url: typing.Union[MetaOapg.properties.url, str, schemas.Unset] = schemas.unset,
        user: typing.Union['User', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PullRequest':
        return super().__new__(
            cls,
            *_args,
            allow_maintainer_edit=allow_maintainer_edit,
            assignee=assignee,
            assignees=assignees,
            base=base,
            body=body,
            closed_at=closed_at,
            comments=comments,
            created_at=created_at,
            diff_url=diff_url,
            due_date=due_date,
            head=head,
            html_url=html_url,
            id=id,
            is_locked=is_locked,
            labels=labels,
            merge_base=merge_base,
            merge_commit_sha=merge_commit_sha,
            mergeable=mergeable,
            merged=merged,
            merged_at=merged_at,
            merged_by=merged_by,
            milestone=milestone,
            number=number,
            patch_url=patch_url,
            state=state,
            title=title,
            updated_at=updated_at,
            url=url,
            user=user,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.label import Label
from openapi_client.model.milestone import Milestone
from openapi_client.model.pr_branch_info import PRBranchInfo
from openapi_client.model.user import User
