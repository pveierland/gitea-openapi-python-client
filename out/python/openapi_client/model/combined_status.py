# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.19.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class CombinedStatus(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    CombinedStatus holds the combined state of several statuses for a single commit
    """


    class MetaOapg:
        
        class properties:
            commit_url = schemas.StrSchema
        
            @staticmethod
            def repository() -> typing.Type['Repository']:
                return Repository
            sha = schemas.StrSchema
            state = schemas.StrSchema
            
            
            class statuses(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CommitStatus']:
                        return CommitStatus
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['CommitStatus'], typing.List['CommitStatus']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'statuses':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CommitStatus':
                    return super().__getitem__(i)
            total_count = schemas.Int64Schema
            url = schemas.StrSchema
            __annotations__ = {
                "commit_url": commit_url,
                "repository": repository,
                "sha": sha,
                "state": state,
                "statuses": statuses,
                "total_count": total_count,
                "url": url,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["commit_url"]) -> MetaOapg.properties.commit_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["repository"]) -> 'Repository': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sha"]) -> MetaOapg.properties.sha: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statuses"]) -> MetaOapg.properties.statuses: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_count"]) -> MetaOapg.properties.total_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["commit_url", "repository", "sha", "state", "statuses", "total_count", "url", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["commit_url"]) -> typing.Union[MetaOapg.properties.commit_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["repository"]) -> typing.Union['Repository', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sha"]) -> typing.Union[MetaOapg.properties.sha, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statuses"]) -> typing.Union[MetaOapg.properties.statuses, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_count"]) -> typing.Union[MetaOapg.properties.total_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["commit_url", "repository", "sha", "state", "statuses", "total_count", "url", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        commit_url: typing.Union[MetaOapg.properties.commit_url, str, schemas.Unset] = schemas.unset,
        repository: typing.Union['Repository', schemas.Unset] = schemas.unset,
        sha: typing.Union[MetaOapg.properties.sha, str, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
        statuses: typing.Union[MetaOapg.properties.statuses, list, tuple, schemas.Unset] = schemas.unset,
        total_count: typing.Union[MetaOapg.properties.total_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        url: typing.Union[MetaOapg.properties.url, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CombinedStatus':
        return super().__new__(
            cls,
            *_args,
            commit_url=commit_url,
            repository=repository,
            sha=sha,
            state=state,
            statuses=statuses,
            total_count=total_count,
            url=url,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.commit_status import CommitStatus
from openapi_client.model.repository import Repository
