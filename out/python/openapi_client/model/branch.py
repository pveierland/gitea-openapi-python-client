# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.19.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class Branch(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Branch represents a repository branch
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def commit() -> typing.Type['PayloadCommit']:
                return PayloadCommit
            effective_branch_protection_name = schemas.StrSchema
            enable_status_check = schemas.BoolSchema
            name = schemas.StrSchema
            protected = schemas.BoolSchema
            required_approvals = schemas.Int64Schema
            
            
            class status_check_contexts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'status_check_contexts':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            user_can_merge = schemas.BoolSchema
            user_can_push = schemas.BoolSchema
            __annotations__ = {
                "commit": commit,
                "effective_branch_protection_name": effective_branch_protection_name,
                "enable_status_check": enable_status_check,
                "name": name,
                "protected": protected,
                "required_approvals": required_approvals,
                "status_check_contexts": status_check_contexts,
                "user_can_merge": user_can_merge,
                "user_can_push": user_can_push,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["commit"]) -> 'PayloadCommit': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["effective_branch_protection_name"]) -> MetaOapg.properties.effective_branch_protection_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable_status_check"]) -> MetaOapg.properties.enable_status_check: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["protected"]) -> MetaOapg.properties.protected: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["required_approvals"]) -> MetaOapg.properties.required_approvals: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status_check_contexts"]) -> MetaOapg.properties.status_check_contexts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_can_merge"]) -> MetaOapg.properties.user_can_merge: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_can_push"]) -> MetaOapg.properties.user_can_push: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["commit", "effective_branch_protection_name", "enable_status_check", "name", "protected", "required_approvals", "status_check_contexts", "user_can_merge", "user_can_push", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["commit"]) -> typing.Union['PayloadCommit', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["effective_branch_protection_name"]) -> typing.Union[MetaOapg.properties.effective_branch_protection_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable_status_check"]) -> typing.Union[MetaOapg.properties.enable_status_check, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["protected"]) -> typing.Union[MetaOapg.properties.protected, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["required_approvals"]) -> typing.Union[MetaOapg.properties.required_approvals, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status_check_contexts"]) -> typing.Union[MetaOapg.properties.status_check_contexts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_can_merge"]) -> typing.Union[MetaOapg.properties.user_can_merge, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_can_push"]) -> typing.Union[MetaOapg.properties.user_can_push, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["commit", "effective_branch_protection_name", "enable_status_check", "name", "protected", "required_approvals", "status_check_contexts", "user_can_merge", "user_can_push", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        commit: typing.Union['PayloadCommit', schemas.Unset] = schemas.unset,
        effective_branch_protection_name: typing.Union[MetaOapg.properties.effective_branch_protection_name, str, schemas.Unset] = schemas.unset,
        enable_status_check: typing.Union[MetaOapg.properties.enable_status_check, bool, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        protected: typing.Union[MetaOapg.properties.protected, bool, schemas.Unset] = schemas.unset,
        required_approvals: typing.Union[MetaOapg.properties.required_approvals, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        status_check_contexts: typing.Union[MetaOapg.properties.status_check_contexts, list, tuple, schemas.Unset] = schemas.unset,
        user_can_merge: typing.Union[MetaOapg.properties.user_can_merge, bool, schemas.Unset] = schemas.unset,
        user_can_push: typing.Union[MetaOapg.properties.user_can_push, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Branch':
        return super().__new__(
            cls,
            *_args,
            commit=commit,
            effective_branch_protection_name=effective_branch_protection_name,
            enable_status_check=enable_status_check,
            name=name,
            protected=protected,
            required_approvals=required_approvals,
            status_check_contexts=status_check_contexts,
            user_can_merge=user_can_merge,
            user_can_push=user_can_push,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.payload_commit import PayloadCommit
