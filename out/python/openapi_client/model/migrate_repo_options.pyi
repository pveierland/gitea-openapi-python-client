# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.19.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class MigrateRepoOptions(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    MigrateRepoOptions options for migrating repository's
this is used to interact with api v1
    """


    class MetaOapg:
        required = {
            "clone_addr",
            "repo_name",
        }
        
        class properties:
            clone_addr = schemas.StrSchema
            repo_name = schemas.StrSchema
            auth_password = schemas.StrSchema
            auth_token = schemas.StrSchema
            auth_username = schemas.StrSchema
            description = schemas.StrSchema
            issues = schemas.BoolSchema
            labels = schemas.BoolSchema
            lfs = schemas.BoolSchema
            lfs_endpoint = schemas.StrSchema
            milestones = schemas.BoolSchema
            mirror = schemas.BoolSchema
            mirror_interval = schemas.StrSchema
            private = schemas.BoolSchema
            pull_requests = schemas.BoolSchema
            releases = schemas.BoolSchema
            repo_owner = schemas.StrSchema
            
            
            class service(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def GIT(cls):
                    return cls("git")
                
                @schemas.classproperty
                def GITHUB(cls):
                    return cls("github")
                
                @schemas.classproperty
                def GITEA(cls):
                    return cls("gitea")
                
                @schemas.classproperty
                def GITLAB(cls):
                    return cls("gitlab")
            uid = schemas.Int64Schema
            wiki = schemas.BoolSchema
            __annotations__ = {
                "clone_addr": clone_addr,
                "repo_name": repo_name,
                "auth_password": auth_password,
                "auth_token": auth_token,
                "auth_username": auth_username,
                "description": description,
                "issues": issues,
                "labels": labels,
                "lfs": lfs,
                "lfs_endpoint": lfs_endpoint,
                "milestones": milestones,
                "mirror": mirror,
                "mirror_interval": mirror_interval,
                "private": private,
                "pull_requests": pull_requests,
                "releases": releases,
                "repo_owner": repo_owner,
                "service": service,
                "uid": uid,
                "wiki": wiki,
            }
    
    clone_addr: MetaOapg.properties.clone_addr
    repo_name: MetaOapg.properties.repo_name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clone_addr"]) -> MetaOapg.properties.clone_addr: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["repo_name"]) -> MetaOapg.properties.repo_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auth_password"]) -> MetaOapg.properties.auth_password: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auth_token"]) -> MetaOapg.properties.auth_token: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auth_username"]) -> MetaOapg.properties.auth_username: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["issues"]) -> MetaOapg.properties.issues: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["labels"]) -> MetaOapg.properties.labels: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lfs"]) -> MetaOapg.properties.lfs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lfs_endpoint"]) -> MetaOapg.properties.lfs_endpoint: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["milestones"]) -> MetaOapg.properties.milestones: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mirror"]) -> MetaOapg.properties.mirror: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mirror_interval"]) -> MetaOapg.properties.mirror_interval: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["private"]) -> MetaOapg.properties.private: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pull_requests"]) -> MetaOapg.properties.pull_requests: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["releases"]) -> MetaOapg.properties.releases: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["repo_owner"]) -> MetaOapg.properties.repo_owner: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["service"]) -> MetaOapg.properties.service: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uid"]) -> MetaOapg.properties.uid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wiki"]) -> MetaOapg.properties.wiki: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["clone_addr", "repo_name", "auth_password", "auth_token", "auth_username", "description", "issues", "labels", "lfs", "lfs_endpoint", "milestones", "mirror", "mirror_interval", "private", "pull_requests", "releases", "repo_owner", "service", "uid", "wiki", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clone_addr"]) -> MetaOapg.properties.clone_addr: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["repo_name"]) -> MetaOapg.properties.repo_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auth_password"]) -> typing.Union[MetaOapg.properties.auth_password, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auth_token"]) -> typing.Union[MetaOapg.properties.auth_token, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auth_username"]) -> typing.Union[MetaOapg.properties.auth_username, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["issues"]) -> typing.Union[MetaOapg.properties.issues, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["labels"]) -> typing.Union[MetaOapg.properties.labels, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lfs"]) -> typing.Union[MetaOapg.properties.lfs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lfs_endpoint"]) -> typing.Union[MetaOapg.properties.lfs_endpoint, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["milestones"]) -> typing.Union[MetaOapg.properties.milestones, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mirror"]) -> typing.Union[MetaOapg.properties.mirror, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mirror_interval"]) -> typing.Union[MetaOapg.properties.mirror_interval, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["private"]) -> typing.Union[MetaOapg.properties.private, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pull_requests"]) -> typing.Union[MetaOapg.properties.pull_requests, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["releases"]) -> typing.Union[MetaOapg.properties.releases, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["repo_owner"]) -> typing.Union[MetaOapg.properties.repo_owner, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["service"]) -> typing.Union[MetaOapg.properties.service, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uid"]) -> typing.Union[MetaOapg.properties.uid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wiki"]) -> typing.Union[MetaOapg.properties.wiki, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["clone_addr", "repo_name", "auth_password", "auth_token", "auth_username", "description", "issues", "labels", "lfs", "lfs_endpoint", "milestones", "mirror", "mirror_interval", "private", "pull_requests", "releases", "repo_owner", "service", "uid", "wiki", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        clone_addr: typing.Union[MetaOapg.properties.clone_addr, str, ],
        repo_name: typing.Union[MetaOapg.properties.repo_name, str, ],
        auth_password: typing.Union[MetaOapg.properties.auth_password, str, schemas.Unset] = schemas.unset,
        auth_token: typing.Union[MetaOapg.properties.auth_token, str, schemas.Unset] = schemas.unset,
        auth_username: typing.Union[MetaOapg.properties.auth_username, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        issues: typing.Union[MetaOapg.properties.issues, bool, schemas.Unset] = schemas.unset,
        labels: typing.Union[MetaOapg.properties.labels, bool, schemas.Unset] = schemas.unset,
        lfs: typing.Union[MetaOapg.properties.lfs, bool, schemas.Unset] = schemas.unset,
        lfs_endpoint: typing.Union[MetaOapg.properties.lfs_endpoint, str, schemas.Unset] = schemas.unset,
        milestones: typing.Union[MetaOapg.properties.milestones, bool, schemas.Unset] = schemas.unset,
        mirror: typing.Union[MetaOapg.properties.mirror, bool, schemas.Unset] = schemas.unset,
        mirror_interval: typing.Union[MetaOapg.properties.mirror_interval, str, schemas.Unset] = schemas.unset,
        private: typing.Union[MetaOapg.properties.private, bool, schemas.Unset] = schemas.unset,
        pull_requests: typing.Union[MetaOapg.properties.pull_requests, bool, schemas.Unset] = schemas.unset,
        releases: typing.Union[MetaOapg.properties.releases, bool, schemas.Unset] = schemas.unset,
        repo_owner: typing.Union[MetaOapg.properties.repo_owner, str, schemas.Unset] = schemas.unset,
        service: typing.Union[MetaOapg.properties.service, str, schemas.Unset] = schemas.unset,
        uid: typing.Union[MetaOapg.properties.uid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        wiki: typing.Union[MetaOapg.properties.wiki, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MigrateRepoOptions':
        return super().__new__(
            cls,
            *_args,
            clone_addr=clone_addr,
            repo_name=repo_name,
            auth_password=auth_password,
            auth_token=auth_token,
            auth_username=auth_username,
            description=description,
            issues=issues,
            labels=labels,
            lfs=lfs,
            lfs_endpoint=lfs_endpoint,
            milestones=milestones,
            mirror=mirror,
            mirror_interval=mirror_interval,
            private=private,
            pull_requests=pull_requests,
            releases=releases,
            repo_owner=repo_owner,
            service=service,
            uid=uid,
            wiki=wiki,
            _configuration=_configuration,
            **kwargs,
        )
