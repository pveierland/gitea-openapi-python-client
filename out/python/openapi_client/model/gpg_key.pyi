# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.19.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class GPGKey(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    GPGKey a user GPG key to sign commit and tag in repository
    """


    class MetaOapg:
        
        class properties:
            can_certify = schemas.BoolSchema
            can_encrypt_comms = schemas.BoolSchema
            can_encrypt_storage = schemas.BoolSchema
            can_sign = schemas.BoolSchema
            created_at = schemas.DateTimeSchema
            
            
            class emails(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['GPGKeyEmail']:
                        return GPGKeyEmail
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['GPGKeyEmail'], typing.List['GPGKeyEmail']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'emails':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'GPGKeyEmail':
                    return super().__getitem__(i)
            expires_at = schemas.DateTimeSchema
            id = schemas.Int64Schema
            key_id = schemas.StrSchema
            primary_key_id = schemas.StrSchema
            public_key = schemas.StrSchema
            
            
            class subkeys(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['GPGKey']:
                        return GPGKey
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['GPGKey'], typing.List['GPGKey']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'subkeys':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'GPGKey':
                    return super().__getitem__(i)
            verified = schemas.BoolSchema
            __annotations__ = {
                "can_certify": can_certify,
                "can_encrypt_comms": can_encrypt_comms,
                "can_encrypt_storage": can_encrypt_storage,
                "can_sign": can_sign,
                "created_at": created_at,
                "emails": emails,
                "expires_at": expires_at,
                "id": id,
                "key_id": key_id,
                "primary_key_id": primary_key_id,
                "public_key": public_key,
                "subkeys": subkeys,
                "verified": verified,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_certify"]) -> MetaOapg.properties.can_certify: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_encrypt_comms"]) -> MetaOapg.properties.can_encrypt_comms: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_encrypt_storage"]) -> MetaOapg.properties.can_encrypt_storage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_sign"]) -> MetaOapg.properties.can_sign: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["emails"]) -> MetaOapg.properties.emails: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expires_at"]) -> MetaOapg.properties.expires_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["key_id"]) -> MetaOapg.properties.key_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primary_key_id"]) -> MetaOapg.properties.primary_key_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["public_key"]) -> MetaOapg.properties.public_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subkeys"]) -> MetaOapg.properties.subkeys: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["verified"]) -> MetaOapg.properties.verified: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["can_certify", "can_encrypt_comms", "can_encrypt_storage", "can_sign", "created_at", "emails", "expires_at", "id", "key_id", "primary_key_id", "public_key", "subkeys", "verified", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_certify"]) -> typing.Union[MetaOapg.properties.can_certify, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_encrypt_comms"]) -> typing.Union[MetaOapg.properties.can_encrypt_comms, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_encrypt_storage"]) -> typing.Union[MetaOapg.properties.can_encrypt_storage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_sign"]) -> typing.Union[MetaOapg.properties.can_sign, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["emails"]) -> typing.Union[MetaOapg.properties.emails, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expires_at"]) -> typing.Union[MetaOapg.properties.expires_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["key_id"]) -> typing.Union[MetaOapg.properties.key_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primary_key_id"]) -> typing.Union[MetaOapg.properties.primary_key_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["public_key"]) -> typing.Union[MetaOapg.properties.public_key, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subkeys"]) -> typing.Union[MetaOapg.properties.subkeys, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["verified"]) -> typing.Union[MetaOapg.properties.verified, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["can_certify", "can_encrypt_comms", "can_encrypt_storage", "can_sign", "created_at", "emails", "expires_at", "id", "key_id", "primary_key_id", "public_key", "subkeys", "verified", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        can_certify: typing.Union[MetaOapg.properties.can_certify, bool, schemas.Unset] = schemas.unset,
        can_encrypt_comms: typing.Union[MetaOapg.properties.can_encrypt_comms, bool, schemas.Unset] = schemas.unset,
        can_encrypt_storage: typing.Union[MetaOapg.properties.can_encrypt_storage, bool, schemas.Unset] = schemas.unset,
        can_sign: typing.Union[MetaOapg.properties.can_sign, bool, schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, schemas.Unset] = schemas.unset,
        emails: typing.Union[MetaOapg.properties.emails, list, tuple, schemas.Unset] = schemas.unset,
        expires_at: typing.Union[MetaOapg.properties.expires_at, str, datetime, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        key_id: typing.Union[MetaOapg.properties.key_id, str, schemas.Unset] = schemas.unset,
        primary_key_id: typing.Union[MetaOapg.properties.primary_key_id, str, schemas.Unset] = schemas.unset,
        public_key: typing.Union[MetaOapg.properties.public_key, str, schemas.Unset] = schemas.unset,
        subkeys: typing.Union[MetaOapg.properties.subkeys, list, tuple, schemas.Unset] = schemas.unset,
        verified: typing.Union[MetaOapg.properties.verified, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GPGKey':
        return super().__new__(
            cls,
            *_args,
            can_certify=can_certify,
            can_encrypt_comms=can_encrypt_comms,
            can_encrypt_storage=can_encrypt_storage,
            can_sign=can_sign,
            created_at=created_at,
            emails=emails,
            expires_at=expires_at,
            id=id,
            key_id=key_id,
            primary_key_id=primary_key_id,
            public_key=public_key,
            subkeys=subkeys,
            verified=verified,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.gpg_key_email import GPGKeyEmail
